{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gowth\\\\OneDrive\\\\Desktop\\\\paysphere\\\\PaySphere-Comprehensive-Payroll-Services_Feb_2025\\\\paysphere-frontend\\\\src\\\\pages\\\\Salary\\\\SalaryDetailOfEmp.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import { useParams } from 'react-router-dom';\n// // // optional for styling\n\n// // const SalaryDetailOfEmp = () => {\n// //   const { id } = useParams(); // employee ID from route\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     const fetchSalaryHistory = async () => {\n// //       const token = localStorage.getItem('token');\n// //       try {\n// //         const response = await axios.get(\n// //           `http://localhost:8000/api/salary/get_employee_payroll_history/${id}/`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${token}`,\n// //             },\n// //           }\n// //         );\n// //         setSalaryHistory(response.data);\n// //       } catch (error) {\n// //         console.error('Failed to fetch salary history', error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchSalaryHistory();\n// //   }, [id]);\n\n// //   return (\n// //     <div className=\"salary-history-container\">\n// //       <h2>Salary History</h2>\n// //       {loading ? (\n// //         <p>Loading...</p>\n// //       ) : salaryHistory.length === 0 ? (\n// //         <p>No salary records found.</p>\n// //       ) : (\n// //         <table className=\"salary-table\">\n// //           <thead>\n// //             <tr>\n// //               <th>Month</th>\n// //               <th>Basic Salary</th>\n// //               <th>Allowances</th>\n// //               <th>Deductions</th>\n// //               <th>Gross Salary</th>\n// //               <th>Net Salary</th>\n// //               <th>Status</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {salaryHistory.map((salary, index) => {\n// //               const date = new Date(salary.created_at);\n// //               const month = date.toLocaleString('default', { month: 'short', year: 'numeric' });\n\n// //               return (\n// //                 <tr key={index}>\n// //                   <td>{month}</td>\n// //                   <td>₹{salary.basic_salary}</td>\n// //                   <td>₹{salary.total_allowances}</td>\n// //                   <td>₹{salary.total_deductions}</td>\n// //                   <td>₹{salary.gross_salary}</td>\n// //                   <td>₹{salary.net_salary}</td>\n// //                   <td style={{ color: salary.net_salary ? 'green' : 'red' }}>\n// //                     {salary.net_salary ? 'Generated' : 'Pending'}\n// //                   </td>\n// //                 </tr>\n// //               );\n// //             })}\n// //           </tbody>\n// //         </table>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SalaryDetailOfEmp;\n\n// // src/pages/Salary/SalaryDetailOfEmp.jsx\n\n// // import './SalaryDetailOfEmp.css';\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import { useParams } from 'react-router-dom';\n\n// // const SalaryDetailOfEmp = () => {\n// //   const { id } = useParams();\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n\n// //     const fetchSalaryHistory = async () => {\n// //       try {\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_status_list/`, {\n// //           headers: { Authorization: `Bearer ${token}` },\n// //         });\n// //         setSalaryHistory(res.data);\n// //       } catch (error) {\n// //         console.error('Failed to fetch salary history', error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchSalaryHistory();\n// //   }, [id]);\n\n// //   return (\n// //     <div className=\"salary-history-container\">\n// //       <h2>Salary History</h2>\n// //       {loading ? (\n// //         <p>Loading...</p>\n// //       ) : salaryHistory.length === 0 ? (\n// //         <p>No salary records found for this employee.</p>\n// //       ) : (\n// //         <table className=\"salary-history-table\">\n// //           <thead>\n// //             <tr>\n// //               <th>Month</th>\n// //               <th>Year</th>\n// //               <th>Basic</th>\n// //               <th>HRA</th>\n// //               <th>Allowances</th>\n// //               <th>Deductions</th>\n// //               <th>Net Salary</th>\n// //               <th>Status</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {salaryHistory.map((record, index) => (\n// //               <tr key={index}>\n// //                 <td>{record.month}</td>\n// //                 <td>{record.year}</td>\n// //                 <td>{record.basic}</td>\n// //                 <td>{record.hra}</td>\n// //                 <td>{record.allowances}</td>\n// //                 <td>{record.deductions}</td>\n// //                 <td>{record.net_salary}</td>\n// //                 <td>{record.is_paid ? 'Paid' : 'Pending'}</td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SalaryDetailOfEmp;\n\n// // import './SalaryDetailOfEmp.css';\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import { useParams } from 'react-router-dom';\n\n// // const SalaryDetailOfEmp = () => {\n// //   const { id } = useParams(); // Get employee ID from URL\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n\n// //     const fetchSalaryHistory = async () => {\n// //       try {\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\n// //           headers: { Authorization: `Bearer ${token}` },\n// //         });\n// //         setSalaryHistory(res.data);\n// //       } catch (error) {\n// //         console.error('Failed to fetch salary history', error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     if (id) fetchSalaryHistory();\n// //   }, [id]);\n\n// //   return (\n// //     <div className=\"salary-history-container\">\n// //       <h2>Salary History</h2>\n// //       {loading ? (\n// //         <p>Loading...</p>\n// //       ) : salaryHistory.length === 0 ? (\n// //         <p>No salary records found for this employee.</p>\n// //       ) : (\n// //         <table className=\"salary-history-table\">\n// //   <thead>\n// //     <tr>\n// //       <th>Month</th>\n// //       <th>Year</th>\n// //       <th>Basic Salary</th>\n// //       <th>Allowances</th>\n// //       <th>Deductions</th>\n// //       <th>Gross Salary</th>\n// //       <th>Net Salary</th>\n// //       <th>Status</th>\n// //       <th>Payment Date</th>\n// //     </tr>\n// //   </thead>\n// //   <tbody>\n// //     {salaryHistory.map((record, index) => (\n// //       <tr key={index}>\n// //         <td>{record.month || '—'}</td>\n// //         <td>{record.year || '—'}</td>\n// //         <td>{record.basic_salary || 0}</td>\n// //         <td>{record.allowances || 0}</td>\n// //         <td>{record.deductions || 0}</td>\n// //         <td>{record.gross_salary || 0}</td>\n// //         <td>{record.net_salary || 0}</td>\n// //         <td>{record.salary_status}</td>\n// //         <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\n// //       </tr>\n// //     ))}\n// //   </tbody>\n// // </table>\n\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SalaryDetailOfEmp;\n\n// // import './SalaryDetailOfEmp.css';\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import { useParams } from 'react-router-dom';\n\n// // const SalaryDetailOfEmp = () => {\n// //   const { id } = useParams();\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     const currentDate = new Date();\n// //     const currentMonth = currentDate.getMonth() + 1; // 0-indexed\n// //     const currentYear = currentDate.getFullYear();\n\n// //     const fetchSalaryHistory = async () => {\n// //       try {\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\n// //           headers: { Authorization: `Bearer ${token}` },\n// //         });\n\n// //         const filteredData = res.data.filter(record => {\n// //           return (\n// //             parseInt(record.month) === currentMonth &&\n// //             parseInt(record.year) === currentYear\n// //           );\n// //         });\n\n// //         setSalaryHistory(filteredData);\n// //       } catch (error) {\n// //         console.error('Failed to fetch salary history', error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     if (id) fetchSalaryHistory();\n// //   }, [id]);\n\n// //   return (\n// //     <div className=\"salary-history-container\">\n// //       <h2>This Month's Salary History</h2>\n// //       {loading ? (\n// //         <p>Loading...</p>\n// //       ) : salaryHistory.length === 0 ? (\n// //         <p>No salary records found for this employee this month.</p>\n// //       ) : (\n// //         <table className=\"salary-history-table\">\n// //           <thead>\n// //             <tr>\n// //               <th>Month</th>\n// //               <th>Year</th>\n// //               <th>Basic Salary</th>\n// //               <th>Allowances</th>\n// //               <th>Deductions</th>\n// //               <th>Gross Salary</th>\n// //               <th>Net Salary</th>\n// //               <th>Status</th>\n// //               <th>Payment Date</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {salaryHistory.map((record, index) => (\n// //               <tr key={index}>\n// //                 <td>{record.month || '—'}</td>\n// //                 <td>{record.year || '—'}</td>\n// //                 <td>{record.basic_salary || 0}</td>\n// //                 <td>{record.allowances || 0}</td>\n// //                 <td>{record.deductions || 0}</td>\n// //                 <td>{record.gross_salary || 0}</td>\n// //                 <td>{record.net_salary || 0}</td>\n// //                 <td>{record.salary_status}</td>\n// //                 <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SalaryDetailOfEmp;\n\n// import './SalaryDetailOfEmp.css';\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useParams } from 'react-router-dom';\n\n// const SalaryDetailOfEmp = () => {\n//   const { id } = useParams();\n//   const [salaryHistory, setSalaryHistory] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     const currentDate = new Date();\n//     const currentMonth = currentDate.getMonth(); // 0-indexed\n//     const currentYear = currentDate.getFullYear();\n\n//     const fetchSalaryHistory = async () => {\n//       try {\n//         const res = await axios.get(\n//           `http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`,\n//           {\n//             headers: { Authorization: `Bearer ${token}` },\n//           }\n//         );\n\n//         const filteredData = res.data.filter(record => {\n//           const recordDate = new Date(record.created_at);\n//           const recordMonth = recordDate.getMonth();\n//           const recordYear = recordDate.getFullYear();\n\n//           return recordMonth === currentMonth && recordYear === currentYear;\n//         });\n\n//         setSalaryHistory(filteredData);\n//       } catch (error) {\n//         console.error('Failed to fetch salary history', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (id) fetchSalaryHistory();\n//   }, [id]);\n\n//   return (\n//     <div className=\"salary-history-container\">\n//       <h2>This Month's Salary History</h2>\n//       {loading ? (\n//         <p>Loading...</p>\n//       ) : salaryHistory.length === 0 ? (\n//         <p>No salary records found for this employee this month.</p>\n//       ) : (\n//         <table className=\"salary-history-table\">\n//           <thead>\n//             <tr>\n//               <th>Month</th>\n//               <th>Year</th>\n//               <th>Basic Salary</th>\n//               <th>Allowances</th>\n//               <th>Deductions</th>\n//               <th>Gross Salary</th>\n//               <th>Net Salary</th>\n//               <th>Status</th>\n//               <th>Payment Date</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {salaryHistory.map((record, index) => {\n//               const recordDate = new Date(record.created_at);\n//               const month = recordDate.toLocaleString('default', { month: 'long' });\n//               const year = recordDate.getFullYear();\n\n//               return (\n//                 <tr key={index}>\n//                   <td>{month}</td>\n//                   <td>{year}</td>\n//                   <td>{record.basic_salary || 0}</td>\n//                   <td>{record.allowances || 0}</td>\n//                   <td>{record.deductions || 0}</td>\n//                   <td>{record.gross_salary || 0}</td>\n//                   <td>{record.net_salary || 0}</td>\n//                   <td>{record.salary_status}</td>\n//                   <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\n//                 </tr>\n//               );\n//             })}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SalaryDetailOfEmp;\n\n// import './SalaryDetailOfEmp.css';\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useParams } from 'react-router-dom';\n\n// const SalaryDetailOfEmp = () => {\n//   const { id } = useParams();\n//   const [salaryHistory, setSalaryHistory] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [generatingPayslip, setGeneratingPayslip] = useState(false);\n//   const [message, setMessage] = useState(''); // State for message\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     const currentDate = new Date();\n//     const currentMonth = currentDate.getMonth(); // 0-indexed\n//     const currentYear = currentDate.getFullYear();\n\n//     const fetchSalaryHistory = async () => {\n//       try {\n//         const res = await axios.get(\n//           `http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`,\n//           {\n//             headers: { Authorization: `Bearer ${token}` },\n//           }\n//         );\n\n//         const filteredData = res.data.filter(record => {\n//           const recordDate = new Date(record.created_at);\n//           const recordMonth = recordDate.getMonth();\n//           const recordYear = recordDate.getFullYear();\n\n//           return recordMonth === currentMonth && recordYear === currentYear;\n//         });\n\n//         setSalaryHistory(filteredData);\n//       } catch (error) {\n//         console.error('Failed to fetch salary history', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (id) fetchSalaryHistory();\n//   }, [id]);\n\n//   // Handle \"Generate Payslip\" button click\n//   const handleGeneratePayslip = async (employeeId) => {\n//     setGeneratingPayslip(true);\n//     setMessage('');\n//     const token = localStorage.getItem('token');\n\n//     try {\n//       const response = await axios.put(\n//         `http://127.0.0.1:8000/api/salary/generate_payslip/${employeeId}/`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//           responseType: 'blob',\n//         }\n//       );\n\n//       // Download Payslip\n//       const blob = new Blob([response.data], { type: 'application/pdf' });\n//       const link = document.createElement('a');\n//       link.href = URL.createObjectURL(blob);\n//       link.download = 'payslip.pdf';\n//       link.click();\n\n//       setMessage('Payslip generated successfully and download started.');\n\n//       // ✅ Re-fetch salary history to get updated status and payment date\n//       const updatedRes = await axios.get(\n//         `http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const currentDate = new Date();\n//       const currentMonth = currentDate.getMonth();\n//       const currentYear = currentDate.getFullYear();\n\n//       const filteredData = updatedRes.data.filter(record => {\n//         const recordDate = new Date(record.created_at);\n//         const recordMonth = recordDate.getMonth();\n//         const recordYear = recordDate.getFullYear();\n//         return recordMonth === currentMonth && recordYear === currentYear;\n//       });\n\n//       setSalaryHistory(filteredData);\n//     } catch (error) {\n//       console.error('Failed to generate payslip', error);\n//       setMessage('Failed to generate payslip. Please try again.');\n//     } finally {\n//       setGeneratingPayslip(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"salary-history-container\">\n//       <h2>This Month's Salary History</h2>\n//       {loading ? (\n//         <p>Loading...</p>\n//       ) : salaryHistory.length === 0 ? (\n//         <p>No salary records found for this employee this month.</p>\n//       ) : (\n//         <>\n//           <table className=\"salary-history-table\">\n//             <thead>\n//               <tr>\n//                 <th>Month</th>\n//                 <th>Year</th>\n//                 <th>Basic Salary</th>\n//                 <th>Allowances</th>\n//                 <th>Deductions</th>\n//                 <th>Gross Salary</th>\n//                 <th>Net Salary</th>\n//                 <th>Status</th>\n//                 <th>Payment Date</th>\n//                 <th>Actions</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {salaryHistory.map((record, index) => {\n//                 const recordDate = new Date(record.created_at);\n//                 const month = recordDate.toLocaleString('default', { month: 'long' });\n//                 const year = recordDate.getFullYear();\n\n//                 return (\n//                   <tr key={index}>\n//                     <td>{month}</td>\n//                     <td>{year}</td>\n//                     <td>{record.basic_salary || 0}</td>\n//                     <td>{record.allowances || 0}</td>\n//                     <td>{record.deductions || 0}</td>\n//                     <td>{record.gross_salary || 0}</td>\n//                     <td>{record.net_salary || 0}</td>\n//                     <td>{record.salary_status}</td>\n//                     <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\n//                     <td>\n//                       {/* Generate Payslip Button */}\n//                       <button\n//                         className=\"generate-payslip-btn\"\n//                         onClick={() => handleGeneratePayslip(record.id)}\n//                         disabled={generatingPayslip}\n//                       >\n//                         {generatingPayslip ? 'Generating...' : 'Generate Payslip'}\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n//         </>\n//       )}\n\n//       {/* Display success or error message */}\n//       {message && <div className=\"message\">{message}</div>}\n//     </div>\n//   );\n// };\n\n// export default SalaryDetailOfEmp;\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport './EmployeeList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployeeList = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [salaryMap, setSalaryMap] = useState({});\n  const navigate = useNavigate();\n  const fetchEmployees = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get('http://127.0.0.1:8000/api/user/', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setEmployees(response.data);\n\n      // Fetch salary records for current month\n      const salaryResponse = await axios.get('http://127.0.0.1:8000/api/salary/current_month_salaries/', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const map = {};\n      salaryResponse.data.forEach(record => {\n        map[record.employee_id] = {\n          is_paid: record.salary_status === 'Paid',\n          ...record\n        };\n      });\n      setSalaryMap(map);\n    } catch (error) {\n      console.error('Error fetching employees or salaries:', error);\n    }\n  };\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n  useEffect(() => {\n    const handleFocus = () => fetchEmployees();\n    window.addEventListener('focus', handleFocus);\n    return () => window.removeEventListener('focus', handleFocus);\n  }, []);\n  const renderActionButton = empId => {\n    const record = salaryMap[empId];\n    if (!record) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"small-button\",\n        onClick: () => navigate(`/salary/add/${empId}`),\n        children: \"Add Salary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 9\n      }, this);\n    }\n    if (record.is_paid) {\n      return null;\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"small-button\",\n        onClick: () => navigate(`/salary/add-allowance/${empId}`),\n        children: \"Add Allowance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"small-button\",\n        onClick: () => navigate(`/salary/add-deduction/${empId}`),\n        children: \"Add Deduction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"small-button\",\n        onClick: () => navigate(`/salary/history/${empId}`),\n        children: \"Generate Payslip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"employee-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Employee List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"employee-list-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Salary Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(emp => {\n          var _salaryMap$emp$id;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: emp.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: emp.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (_salaryMap$emp$id = salaryMap[emp.id]) !== null && _salaryMap$emp$id !== void 0 && _salaryMap$emp$id.is_paid ? 'Paid' : 'Not Paid'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: renderActionButton(emp.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 15\n            }, this)]\n          }, emp.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 688,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployeeList, \"XnEfFTvgqqCaHafOi1qRPjmN63c=\", false, function () {\n  return [useNavigate];\n});\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","axios","jsxDEV","_jsxDEV","EmployeeList","_s","employees","setEmployees","salaryMap","setSalaryMap","navigate","fetchEmployees","token","localStorage","getItem","response","get","headers","Authorization","data","salaryResponse","map","forEach","record","employee_id","is_paid","salary_status","error","console","handleFocus","window","addEventListener","removeEventListener","renderActionButton","empId","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","emp","_salaryMap$emp$id","name","email","id","_c","$RefreshReg$"],"sources":["C:/Users/gowth/OneDrive/Desktop/paysphere/PaySphere-Comprehensive-Payroll-Services_Feb_2025/paysphere-frontend/src/pages/Salary/SalaryDetailOfEmp.jsx"],"sourcesContent":["// // import React, { useEffect, useState } from 'react';\r\n// // import axios from 'axios';\r\n// // import { useParams } from 'react-router-dom';\r\n// // // optional for styling\r\n\r\n// // const SalaryDetailOfEmp = () => {\r\n// //   const { id } = useParams(); // employee ID from route\r\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchSalaryHistory = async () => {\r\n// //       const token = localStorage.getItem('token');\r\n// //       try {\r\n// //         const response = await axios.get(\r\n// //           `http://localhost:8000/api/salary/get_employee_payroll_history/${id}/`,\r\n// //           {\r\n// //             headers: {\r\n// //               Authorization: `Bearer ${token}`,\r\n// //             },\r\n// //           }\r\n// //         );\r\n// //         setSalaryHistory(response.data);\r\n// //       } catch (error) {\r\n// //         console.error('Failed to fetch salary history', error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchSalaryHistory();\r\n// //   }, [id]);\r\n\r\n// //   return (\r\n// //     <div className=\"salary-history-container\">\r\n// //       <h2>Salary History</h2>\r\n// //       {loading ? (\r\n// //         <p>Loading...</p>\r\n// //       ) : salaryHistory.length === 0 ? (\r\n// //         <p>No salary records found.</p>\r\n// //       ) : (\r\n// //         <table className=\"salary-table\">\r\n// //           <thead>\r\n// //             <tr>\r\n// //               <th>Month</th>\r\n// //               <th>Basic Salary</th>\r\n// //               <th>Allowances</th>\r\n// //               <th>Deductions</th>\r\n// //               <th>Gross Salary</th>\r\n// //               <th>Net Salary</th>\r\n// //               <th>Status</th>\r\n// //             </tr>\r\n// //           </thead>\r\n// //           <tbody>\r\n// //             {salaryHistory.map((salary, index) => {\r\n// //               const date = new Date(salary.created_at);\r\n// //               const month = date.toLocaleString('default', { month: 'short', year: 'numeric' });\r\n\r\n// //               return (\r\n// //                 <tr key={index}>\r\n// //                   <td>{month}</td>\r\n// //                   <td>₹{salary.basic_salary}</td>\r\n// //                   <td>₹{salary.total_allowances}</td>\r\n// //                   <td>₹{salary.total_deductions}</td>\r\n// //                   <td>₹{salary.gross_salary}</td>\r\n// //                   <td>₹{salary.net_salary}</td>\r\n// //                   <td style={{ color: salary.net_salary ? 'green' : 'red' }}>\r\n// //                     {salary.net_salary ? 'Generated' : 'Pending'}\r\n// //                   </td>\r\n// //                 </tr>\r\n// //               );\r\n// //             })}\r\n// //           </tbody>\r\n// //         </table>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\n// // src/pages/Salary/SalaryDetailOfEmp.jsx\r\n\r\n\r\n// // import './SalaryDetailOfEmp.css';\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import axios from 'axios';\r\n// // import { useParams } from 'react-router-dom';\r\n\r\n// // const SalaryDetailOfEmp = () => {\r\n// //   const { id } = useParams();\r\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n\r\n// //     const fetchSalaryHistory = async () => {\r\n// //       try {\r\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_status_list/`, {\r\n// //           headers: { Authorization: `Bearer ${token}` },\r\n// //         });\r\n// //         setSalaryHistory(res.data);\r\n// //       } catch (error) {\r\n// //         console.error('Failed to fetch salary history', error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchSalaryHistory();\r\n// //   }, [id]);\r\n\r\n// //   return (\r\n// //     <div className=\"salary-history-container\">\r\n// //       <h2>Salary History</h2>\r\n// //       {loading ? (\r\n// //         <p>Loading...</p>\r\n// //       ) : salaryHistory.length === 0 ? (\r\n// //         <p>No salary records found for this employee.</p>\r\n// //       ) : (\r\n// //         <table className=\"salary-history-table\">\r\n// //           <thead>\r\n// //             <tr>\r\n// //               <th>Month</th>\r\n// //               <th>Year</th>\r\n// //               <th>Basic</th>\r\n// //               <th>HRA</th>\r\n// //               <th>Allowances</th>\r\n// //               <th>Deductions</th>\r\n// //               <th>Net Salary</th>\r\n// //               <th>Status</th>\r\n// //             </tr>\r\n// //           </thead>\r\n// //           <tbody>\r\n// //             {salaryHistory.map((record, index) => (\r\n// //               <tr key={index}>\r\n// //                 <td>{record.month}</td>\r\n// //                 <td>{record.year}</td>\r\n// //                 <td>{record.basic}</td>\r\n// //                 <td>{record.hra}</td>\r\n// //                 <td>{record.allowances}</td>\r\n// //                 <td>{record.deductions}</td>\r\n// //                 <td>{record.net_salary}</td>\r\n// //                 <td>{record.is_paid ? 'Paid' : 'Pending'}</td>\r\n// //               </tr>\r\n// //             ))}\r\n// //           </tbody>\r\n// //         </table>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\n// // import './SalaryDetailOfEmp.css';\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import axios from 'axios';\r\n// // import { useParams } from 'react-router-dom';\r\n\r\n// // const SalaryDetailOfEmp = () => {\r\n// //   const { id } = useParams(); // Get employee ID from URL\r\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n\r\n// //     const fetchSalaryHistory = async () => {\r\n// //       try {\r\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\r\n// //           headers: { Authorization: `Bearer ${token}` },\r\n// //         });\r\n// //         setSalaryHistory(res.data);\r\n// //       } catch (error) {\r\n// //         console.error('Failed to fetch salary history', error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     if (id) fetchSalaryHistory();\r\n// //   }, [id]);\r\n\r\n// //   return (\r\n// //     <div className=\"salary-history-container\">\r\n// //       <h2>Salary History</h2>\r\n// //       {loading ? (\r\n// //         <p>Loading...</p>\r\n// //       ) : salaryHistory.length === 0 ? (\r\n// //         <p>No salary records found for this employee.</p>\r\n// //       ) : (\r\n// //         <table className=\"salary-history-table\">\r\n// //   <thead>\r\n// //     <tr>\r\n// //       <th>Month</th>\r\n// //       <th>Year</th>\r\n// //       <th>Basic Salary</th>\r\n// //       <th>Allowances</th>\r\n// //       <th>Deductions</th>\r\n// //       <th>Gross Salary</th>\r\n// //       <th>Net Salary</th>\r\n// //       <th>Status</th>\r\n// //       <th>Payment Date</th>\r\n// //     </tr>\r\n// //   </thead>\r\n// //   <tbody>\r\n// //     {salaryHistory.map((record, index) => (\r\n// //       <tr key={index}>\r\n// //         <td>{record.month || '—'}</td>\r\n// //         <td>{record.year || '—'}</td>\r\n// //         <td>{record.basic_salary || 0}</td>\r\n// //         <td>{record.allowances || 0}</td>\r\n// //         <td>{record.deductions || 0}</td>\r\n// //         <td>{record.gross_salary || 0}</td>\r\n// //         <td>{record.net_salary || 0}</td>\r\n// //         <td>{record.salary_status}</td>\r\n// //         <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\r\n// //       </tr>\r\n// //     ))}\r\n// //   </tbody>\r\n// // </table>\r\n\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\n// // import './SalaryDetailOfEmp.css';\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import axios from 'axios';\r\n// // import { useParams } from 'react-router-dom';\r\n\r\n// // const SalaryDetailOfEmp = () => {\r\n// //   const { id } = useParams();\r\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n// //     const currentDate = new Date();\r\n// //     const currentMonth = currentDate.getMonth() + 1; // 0-indexed\r\n// //     const currentYear = currentDate.getFullYear();\r\n\r\n// //     const fetchSalaryHistory = async () => {\r\n// //       try {\r\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\r\n// //           headers: { Authorization: `Bearer ${token}` },\r\n// //         });\r\n\r\n// //         const filteredData = res.data.filter(record => {\r\n// //           return (\r\n// //             parseInt(record.month) === currentMonth &&\r\n// //             parseInt(record.year) === currentYear\r\n// //           );\r\n// //         });\r\n\r\n// //         setSalaryHistory(filteredData);\r\n// //       } catch (error) {\r\n// //         console.error('Failed to fetch salary history', error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     if (id) fetchSalaryHistory();\r\n// //   }, [id]);\r\n\r\n// //   return (\r\n// //     <div className=\"salary-history-container\">\r\n// //       <h2>This Month's Salary History</h2>\r\n// //       {loading ? (\r\n// //         <p>Loading...</p>\r\n// //       ) : salaryHistory.length === 0 ? (\r\n// //         <p>No salary records found for this employee this month.</p>\r\n// //       ) : (\r\n// //         <table className=\"salary-history-table\">\r\n// //           <thead>\r\n// //             <tr>\r\n// //               <th>Month</th>\r\n// //               <th>Year</th>\r\n// //               <th>Basic Salary</th>\r\n// //               <th>Allowances</th>\r\n// //               <th>Deductions</th>\r\n// //               <th>Gross Salary</th>\r\n// //               <th>Net Salary</th>\r\n// //               <th>Status</th>\r\n// //               <th>Payment Date</th>\r\n// //             </tr>\r\n// //           </thead>\r\n// //           <tbody>\r\n// //             {salaryHistory.map((record, index) => (\r\n// //               <tr key={index}>\r\n// //                 <td>{record.month || '—'}</td>\r\n// //                 <td>{record.year || '—'}</td>\r\n// //                 <td>{record.basic_salary || 0}</td>\r\n// //                 <td>{record.allowances || 0}</td>\r\n// //                 <td>{record.deductions || 0}</td>\r\n// //                 <td>{record.gross_salary || 0}</td>\r\n// //                 <td>{record.net_salary || 0}</td>\r\n// //                 <td>{record.salary_status}</td>\r\n// //                 <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\r\n// //               </tr>\r\n// //             ))}\r\n// //           </tbody>\r\n// //         </table>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default SalaryDetailOfEmp;\r\n\r\n\r\n// import './SalaryDetailOfEmp.css';\r\n// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const SalaryDetailOfEmp = () => {\r\n//   const { id } = useParams();\r\n//   const [salaryHistory, setSalaryHistory] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     const currentDate = new Date();\r\n//     const currentMonth = currentDate.getMonth(); // 0-indexed\r\n//     const currentYear = currentDate.getFullYear();\r\n\r\n//     const fetchSalaryHistory = async () => {\r\n//       try {\r\n//         const res = await axios.get(\r\n//           `http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`,\r\n//           {\r\n//             headers: { Authorization: `Bearer ${token}` },\r\n//           }\r\n//         );\r\n\r\n//         const filteredData = res.data.filter(record => {\r\n//           const recordDate = new Date(record.created_at);\r\n//           const recordMonth = recordDate.getMonth();\r\n//           const recordYear = recordDate.getFullYear();\r\n\r\n//           return recordMonth === currentMonth && recordYear === currentYear;\r\n//         });\r\n\r\n//         setSalaryHistory(filteredData);\r\n//       } catch (error) {\r\n//         console.error('Failed to fetch salary history', error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     if (id) fetchSalaryHistory();\r\n//   }, [id]);\r\n\r\n//   return (\r\n//     <div className=\"salary-history-container\">\r\n//       <h2>This Month's Salary History</h2>\r\n//       {loading ? (\r\n//         <p>Loading...</p>\r\n//       ) : salaryHistory.length === 0 ? (\r\n//         <p>No salary records found for this employee this month.</p>\r\n//       ) : (\r\n//         <table className=\"salary-history-table\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Month</th>\r\n//               <th>Year</th>\r\n//               <th>Basic Salary</th>\r\n//               <th>Allowances</th>\r\n//               <th>Deductions</th>\r\n//               <th>Gross Salary</th>\r\n//               <th>Net Salary</th>\r\n//               <th>Status</th>\r\n//               <th>Payment Date</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {salaryHistory.map((record, index) => {\r\n//               const recordDate = new Date(record.created_at);\r\n//               const month = recordDate.toLocaleString('default', { month: 'long' });\r\n//               const year = recordDate.getFullYear();\r\n\r\n//               return (\r\n//                 <tr key={index}>\r\n//                   <td>{month}</td>\r\n//                   <td>{year}</td>\r\n//                   <td>{record.basic_salary || 0}</td>\r\n//                   <td>{record.allowances || 0}</td>\r\n//                   <td>{record.deductions || 0}</td>\r\n//                   <td>{record.gross_salary || 0}</td>\r\n//                   <td>{record.net_salary || 0}</td>\r\n//                   <td>{record.salary_status}</td>\r\n//                   <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\r\n//                 </tr>\r\n//               );\r\n//             })}\r\n//           </tbody>\r\n//         </table>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\n\r\n// import './SalaryDetailOfEmp.css';\r\n// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const SalaryDetailOfEmp = () => {\r\n//   const { id } = useParams();\r\n//   const [salaryHistory, setSalaryHistory] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [generatingPayslip, setGeneratingPayslip] = useState(false);\r\n//   const [message, setMessage] = useState(''); // State for message\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     const currentDate = new Date();\r\n//     const currentMonth = currentDate.getMonth(); // 0-indexed\r\n//     const currentYear = currentDate.getFullYear();\r\n\r\n//     const fetchSalaryHistory = async () => {\r\n//       try {\r\n//         const res = await axios.get(\r\n//           `http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`,\r\n//           {\r\n//             headers: { Authorization: `Bearer ${token}` },\r\n//           }\r\n//         );\r\n\r\n//         const filteredData = res.data.filter(record => {\r\n//           const recordDate = new Date(record.created_at);\r\n//           const recordMonth = recordDate.getMonth();\r\n//           const recordYear = recordDate.getFullYear();\r\n\r\n//           return recordMonth === currentMonth && recordYear === currentYear;\r\n//         });\r\n\r\n//         setSalaryHistory(filteredData);\r\n//       } catch (error) {\r\n//         console.error('Failed to fetch salary history', error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     if (id) fetchSalaryHistory();\r\n//   }, [id]);\r\n\r\n//   // Handle \"Generate Payslip\" button click\r\n//   const handleGeneratePayslip = async (employeeId) => {\r\n//     setGeneratingPayslip(true);\r\n//     setMessage('');\r\n//     const token = localStorage.getItem('token');\r\n  \r\n//     try {\r\n//       const response = await axios.put(\r\n//         `http://127.0.0.1:8000/api/salary/generate_payslip/${employeeId}/`,\r\n//         {},\r\n//         {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//           responseType: 'blob',\r\n//         }\r\n//       );\r\n  \r\n//       // Download Payslip\r\n//       const blob = new Blob([response.data], { type: 'application/pdf' });\r\n//       const link = document.createElement('a');\r\n//       link.href = URL.createObjectURL(blob);\r\n//       link.download = 'payslip.pdf';\r\n//       link.click();\r\n  \r\n//       setMessage('Payslip generated successfully and download started.');\r\n  \r\n//       // ✅ Re-fetch salary history to get updated status and payment date\r\n//       const updatedRes = await axios.get(\r\n//         `http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`,\r\n//         {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         }\r\n//       );\r\n  \r\n//       const currentDate = new Date();\r\n//       const currentMonth = currentDate.getMonth();\r\n//       const currentYear = currentDate.getFullYear();\r\n  \r\n//       const filteredData = updatedRes.data.filter(record => {\r\n//         const recordDate = new Date(record.created_at);\r\n//         const recordMonth = recordDate.getMonth();\r\n//         const recordYear = recordDate.getFullYear();\r\n//         return recordMonth === currentMonth && recordYear === currentYear;\r\n//       });\r\n  \r\n//       setSalaryHistory(filteredData);\r\n//     } catch (error) {\r\n//       console.error('Failed to generate payslip', error);\r\n//       setMessage('Failed to generate payslip. Please try again.');\r\n//     } finally {\r\n//       setGeneratingPayslip(false);\r\n//     }\r\n//   };\r\n  \r\n  \r\n\r\n//   return (\r\n//     <div className=\"salary-history-container\">\r\n//       <h2>This Month's Salary History</h2>\r\n//       {loading ? (\r\n//         <p>Loading...</p>\r\n//       ) : salaryHistory.length === 0 ? (\r\n//         <p>No salary records found for this employee this month.</p>\r\n//       ) : (\r\n//         <>\r\n//           <table className=\"salary-history-table\">\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Month</th>\r\n//                 <th>Year</th>\r\n//                 <th>Basic Salary</th>\r\n//                 <th>Allowances</th>\r\n//                 <th>Deductions</th>\r\n//                 <th>Gross Salary</th>\r\n//                 <th>Net Salary</th>\r\n//                 <th>Status</th>\r\n//                 <th>Payment Date</th>\r\n//                 <th>Actions</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {salaryHistory.map((record, index) => {\r\n//                 const recordDate = new Date(record.created_at);\r\n//                 const month = recordDate.toLocaleString('default', { month: 'long' });\r\n//                 const year = recordDate.getFullYear();\r\n\r\n//                 return (\r\n//                   <tr key={index}>\r\n//                     <td>{month}</td>\r\n//                     <td>{year}</td>\r\n//                     <td>{record.basic_salary || 0}</td>\r\n//                     <td>{record.allowances || 0}</td>\r\n//                     <td>{record.deductions || 0}</td>\r\n//                     <td>{record.gross_salary || 0}</td>\r\n//                     <td>{record.net_salary || 0}</td>\r\n//                     <td>{record.salary_status}</td>\r\n//                     <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\r\n//                     <td>\r\n//                       {/* Generate Payslip Button */}\r\n//                       <button\r\n//                         className=\"generate-payslip-btn\"\r\n//                         onClick={() => handleGeneratePayslip(record.id)}\r\n//                         disabled={generatingPayslip}\r\n//                       >\r\n//                         {generatingPayslip ? 'Generating...' : 'Generate Payslip'}\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 );\r\n//               })}\r\n//             </tbody>\r\n//           </table>\r\n//         </>\r\n//       )}\r\n\r\n//       {/* Display success or error message */}\r\n//       {message && <div className=\"message\">{message}</div>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './EmployeeList.css';\r\n\r\nconst EmployeeList = () => {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [salaryMap, setSalaryMap] = useState({});\r\n  const navigate = useNavigate();\r\n\r\n  const fetchEmployees = async () => {\r\n    const token = localStorage.getItem('token');\r\n    try {\r\n      const response = await axios.get('http://127.0.0.1:8000/api/user/', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      setEmployees(response.data);\r\n\r\n      // Fetch salary records for current month\r\n      const salaryResponse = await axios.get(\r\n        'http://127.0.0.1:8000/api/salary/current_month_salaries/',\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const map = {};\r\n      salaryResponse.data.forEach((record) => {\r\n        map[record.employee_id] = {\r\n          is_paid: record.salary_status === 'Paid',\r\n          ...record,\r\n        };\r\n      });\r\n      setSalaryMap(map);\r\n    } catch (error) {\r\n      console.error('Error fetching employees or salaries:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEmployees();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleFocus = () => fetchEmployees();\r\n    window.addEventListener('focus', handleFocus);\r\n    return () => window.removeEventListener('focus', handleFocus);\r\n  }, []);\r\n\r\n  const renderActionButton = (empId) => {\r\n    const record = salaryMap[empId];\r\n\r\n    if (!record) {\r\n      return (\r\n        <button\r\n          className=\"small-button\"\r\n          onClick={() => navigate(`/salary/add/${empId}`)}\r\n        >\r\n          Add Salary\r\n        </button>\r\n      );\r\n    }\r\n\r\n    if (record.is_paid) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className=\"button-group\">\r\n        <button\r\n          className=\"small-button\"\r\n          onClick={() => navigate(`/salary/add-allowance/${empId}`)}\r\n        >\r\n          Add Allowance\r\n        </button>\r\n        <button\r\n          className=\"small-button\"\r\n          onClick={() => navigate(`/salary/add-deduction/${empId}`)}\r\n        >\r\n          Add Deduction\r\n        </button>\r\n        <button\r\n          className=\"small-button\"\r\n          onClick={() => navigate(`/salary/history/${empId}`)}\r\n        >\r\n          Generate Payslip\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"employee-list-container\">\r\n      <h2>Employee List</h2>\r\n      <table className=\"employee-list-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Salary Status</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {employees.map((emp) => (\r\n            <tr key={emp.id}>\r\n              <td>{emp.name}</td>\r\n              <td>{emp.email}</td>\r\n              <td>\r\n                {salaryMap[emp.id]?.is_paid ? 'Paid' : 'Not Paid'}\r\n              </td>\r\n              <td>{renderActionButton(emp.id)}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeList;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}