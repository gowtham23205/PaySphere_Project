{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gowth\\\\OneDrive\\\\Desktop\\\\paysphere\\\\PaySphere-Comprehensive-Payroll-Services_Feb_2025\\\\paysphere-frontend\\\\src\\\\pages\\\\Employees\\\\EmployeeList.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n// import './EmployeeList.css';\n\n// const EmployeeList = () => {\n//   const [employees, setEmployees] = useState([]);\n//   const [salaryMap, setSalaryMap] = useState({});\n//   const navigate = useNavigate();\n//   const token = localStorage.getItem('token');\n\n//   useEffect(() => {\n//     fetchEmployees();\n//   }, [token]);\n\n//   const fetchEmployees = async () => {\n//     try {\n//       const empRes = await axios.get('http://localhost:8000/api/users/', {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n\n//       const activeEmployees = empRes.data.filter(emp => emp.is_active);\n//       activeEmployees.sort((a, b) => a.id - b.id);\n//       setEmployees(activeEmployees);\n\n//       const salaryMapTemp = {};\n//       await Promise.all(\n//         activeEmployees.map(async (emp) => {\n//           try {\n//             const res = await axios.get(\n//               `http://localhost:8000/api/salary/employee_salary_history/${emp.id}/`,\n//               {\n//                 headers: { Authorization: `Bearer ${token}` },\n//               }\n//             );\n//             const history = res.data;\n//             if (Array.isArray(history) && history.length > 0) {\n//               salaryMapTemp[emp.id] = history[0];\n//             }\n//           } catch (error) {\n//             console.warn(`No salary record for user ${emp.id}`);\n//           }\n//         })\n//       );\n\n//       setSalaryMap(salaryMapTemp);\n//     } catch (error) {\n//       console.error('Error fetching employees or salary data', error);\n//     }\n//   };\n\n//   const handleGeneratePayslip = async (empId) => {\n//     try {\n//       await axios.put(\n//         `http://localhost:8000/api/salary/generate_payslip/${empId}/`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       // Refresh salary record after generation\n//       const res = await axios.get(\n//         `http://localhost:8000/api/salary/employee_salary_history/${empId}/`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const history = res.data;\n//       if (Array.isArray(history) && history.length > 0) {\n//         setSalaryMap(prev => ({\n//           ...prev,\n//           [empId]: history[0],\n//         }));\n//       }\n\n//       alert(\"Payslip generated and email sent!\");\n//     } catch (error) {\n//       console.error('Error generating payslip:', error);\n//       alert(\"Failed to generate payslip\");\n//     }\n//   };\n\n//   const renderSalaryStatus = (empId) => {\n//     const record = salaryMap[empId];\n//     if (record) {\n//       const status = record.salary_status?.toLowerCase();\n//       if (status === 'paid') return 'Paid';\n//       if (status === 'pending') return 'Pending';\n//     }\n//     return 'Not Generated';\n//   };\n\n//   const renderActionButton = (empId) => {\n//     const record = salaryMap[empId];\n\n//     if (!record) {\n//       return (\n//         <button\n//           className=\"small-button\"\n//           onClick={() => navigate(`/salary/add/${empId}`)}\n//         >\n//           Add Salary\n//         </button>\n//       );\n//     }\n\n//     const status = record.salary_status?.toLowerCase();\n\n//     if (status === 'paid') {\n//       return (\n//         <button\n//           className=\"small-button\"\n//           onClick={() => navigate(`/salary/history/${empId}`)}\n//         >\n//           View History\n//         </button>\n//       );\n//     }\n\n//     if (status === 'pending') {\n//       return (\n//         <div className=\"button-group\">\n//           <button\n//             className=\"small-button\"\n//             onClick={() => navigate(`/salary/add-allowance/${empId}`)}\n//           >\n//             Add Allowance\n//           </button>\n//           <button\n//             className=\"small-button\"\n//             onClick={() => navigate(`/salary/add-deduction/${empId}`)}\n//           >\n//             Add Deduction\n//           </button>\n//           <button\n//             className=\"small-button\"\n//             onClick={() => navigate(`/salary/history/${empId}`)}\n//           >\n//             Generate Payslip\n//           </button>\n//         </div>\n//       );\n//     }\n\n//     return null;\n//   };\n\n//   return (\n//     <div className=\"employee-list-container\">\n//       <h2>Employee List</h2>\n//       <table className=\"employee-table\">\n//         <thead>\n//           <tr>\n//             <th>ID</th>\n//             <th>Name</th>\n//             <th>Email</th>\n//             <th>Status</th>\n//             <th>Salary Status</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {employees.map((emp) => (\n//             <tr key={emp.id}>\n//               <td>{emp.id}</td>\n//               <td>\n//                 <a href={`/employees/${emp.id}`}>\n//                   {emp.first_name} {emp.last_name}\n//                 </a>\n//               </td>\n//               <td>{emp.email}</td>\n//               <td>{emp.is_active ? 'Active' : 'Inactive'}</td>\n//               <td>{renderSalaryStatus(emp.id)}</td>\n//               <td>{renderActionButton(emp.id)}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default EmployeeList;\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport './EmployeeList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployeeList = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [salaryMap, setSalaryMap] = useState({});\n  const navigate = useNavigate();\n  const token = localStorage.getItem('token');\n  const fetchEmployees = useCallback(async () => {\n    try {\n      const empRes = await axios.get('http://localhost:8000/api/users/', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const activeEmployees = empRes.data.filter(emp => emp.is_active);\n      activeEmployees.sort((a, b) => a.id - b.id);\n      setEmployees(activeEmployees);\n      const salaryMapTemp = {};\n      await Promise.all(activeEmployees.map(async emp => {\n        try {\n          const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${emp.id}/`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const history = res.data;\n          if (Array.isArray(history) && history.length > 0) {\n            salaryMapTemp[emp.id] = history[0];\n          }\n        } catch (error) {\n          console.warn(`No salary record for user ${emp.id}`);\n        }\n      }));\n      setSalaryMap(salaryMapTemp);\n    } catch (error) {\n      console.error('Error fetching employees or salary data', error);\n    }\n  }, [token]);\n  useEffect(() => {\n    fetchEmployees();\n  }, [fetchEmployees]);\n  const renderSalaryStatus = empId => {\n    const record = salaryMap[empId];\n    if (record) {\n      var _record$salary_status;\n      const status = (_record$salary_status = record.salary_status) === null || _record$salary_status === void 0 ? void 0 : _record$salary_status.toLowerCase();\n      if (status === 'paid') return 'Paid';\n      if (status === 'pending') return 'Pending';\n    }\n    return 'Not Generated';\n  };\n  const renderActionButton = empId => {\n    var _record$salary_status2;\n    const record = salaryMap[empId];\n    if (!record) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"small-button\",\n        onClick: () => navigate(`/salary/add/${empId}`),\n        children: \"Add Salary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this);\n    }\n    const status = (_record$salary_status2 = record.salary_status) === null || _record$salary_status2 === void 0 ? void 0 : _record$salary_status2.toLowerCase();\n    if (status === 'paid') {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"small-button\",\n        onClick: () => navigate(`/salary/history/${empId}`),\n        children: \"View History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this);\n    }\n    if (status === 'pending') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"small-button\",\n          onClick: () => navigate(`/salary/add-allowance/${empId}`),\n          children: \"Add Allowance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"small-button\",\n          onClick: () => navigate(`/salary/add-deduction/${empId}`),\n          children: \"Add Deduction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"small-button\",\n          onClick: () => navigate(`/salary/history/${empId}`),\n          children: \"Generate Payslip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"employee-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Employee List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"employee-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Salary Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(emp => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: emp.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `/employees/${emp.id}`,\n              children: [emp.first_name, \" \", emp.last_name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: emp.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: emp.is_active ? 'Active' : 'Inactive'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: renderSalaryStatus(emp.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: renderActionButton(emp.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this)]\n        }, emp.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployeeList, \"Le3IgV1KbN1EW6wMImWctYssSJY=\", false, function () {\n  return [useNavigate];\n});\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","axios","useNavigate","jsxDEV","_jsxDEV","EmployeeList","_s","employees","setEmployees","salaryMap","setSalaryMap","navigate","token","localStorage","getItem","fetchEmployees","empRes","get","headers","Authorization","activeEmployees","data","filter","emp","is_active","sort","a","b","id","salaryMapTemp","Promise","all","map","res","history","Array","isArray","length","error","console","warn","renderSalaryStatus","empId","record","_record$salary_status","status","salary_status","toLowerCase","renderActionButton","_record$salary_status2","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","href","first_name","last_name","email","_c","$RefreshReg$"],"sources":["C:/Users/gowth/OneDrive/Desktop/paysphere/PaySphere-Comprehensive-Payroll-Services_Feb_2025/paysphere-frontend/src/pages/Employees/EmployeeList.jsx"],"sourcesContent":["\r\n// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import './EmployeeList.css';\r\n\r\n// const EmployeeList = () => {\r\n//   const [employees, setEmployees] = useState([]);\r\n//   const [salaryMap, setSalaryMap] = useState({});\r\n//   const navigate = useNavigate();\r\n//   const token = localStorage.getItem('token');\r\n\r\n//   useEffect(() => {\r\n//     fetchEmployees();\r\n//   }, [token]);\r\n\r\n//   const fetchEmployees = async () => {\r\n//     try {\r\n//       const empRes = await axios.get('http://localhost:8000/api/users/', {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n\r\n//       const activeEmployees = empRes.data.filter(emp => emp.is_active);\r\n//       activeEmployees.sort((a, b) => a.id - b.id);\r\n//       setEmployees(activeEmployees);\r\n\r\n//       const salaryMapTemp = {};\r\n//       await Promise.all(\r\n//         activeEmployees.map(async (emp) => {\r\n//           try {\r\n//             const res = await axios.get(\r\n//               `http://localhost:8000/api/salary/employee_salary_history/${emp.id}/`,\r\n//               {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//               }\r\n//             );\r\n//             const history = res.data;\r\n//             if (Array.isArray(history) && history.length > 0) {\r\n//               salaryMapTemp[emp.id] = history[0];\r\n//             }\r\n//           } catch (error) {\r\n//             console.warn(`No salary record for user ${emp.id}`);\r\n//           }\r\n//         })\r\n//       );\r\n\r\n//       setSalaryMap(salaryMapTemp);\r\n//     } catch (error) {\r\n//       console.error('Error fetching employees or salary data', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleGeneratePayslip = async (empId) => {\r\n//     try {\r\n//       await axios.put(\r\n//         `http://localhost:8000/api/salary/generate_payslip/${empId}/`,\r\n//         {},\r\n//         {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         }\r\n//       );\r\n\r\n//       // Refresh salary record after generation\r\n//       const res = await axios.get(\r\n//         `http://localhost:8000/api/salary/employee_salary_history/${empId}/`,\r\n//         {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         }\r\n//       );\r\n//       const history = res.data;\r\n//       if (Array.isArray(history) && history.length > 0) {\r\n//         setSalaryMap(prev => ({\r\n//           ...prev,\r\n//           [empId]: history[0],\r\n//         }));\r\n//       }\r\n\r\n//       alert(\"Payslip generated and email sent!\");\r\n//     } catch (error) {\r\n//       console.error('Error generating payslip:', error);\r\n//       alert(\"Failed to generate payslip\");\r\n//     }\r\n//   };\r\n\r\n//   const renderSalaryStatus = (empId) => {\r\n//     const record = salaryMap[empId];\r\n//     if (record) {\r\n//       const status = record.salary_status?.toLowerCase();\r\n//       if (status === 'paid') return 'Paid';\r\n//       if (status === 'pending') return 'Pending';\r\n//     }\r\n//     return 'Not Generated';\r\n//   };\r\n\r\n//   const renderActionButton = (empId) => {\r\n//     const record = salaryMap[empId];\r\n  \r\n//     if (!record) {\r\n//       return (\r\n//         <button\r\n//           className=\"small-button\"\r\n//           onClick={() => navigate(`/salary/add/${empId}`)}\r\n//         >\r\n//           Add Salary\r\n//         </button>\r\n//       );\r\n//     }\r\n  \r\n//     const status = record.salary_status?.toLowerCase();\r\n  \r\n//     if (status === 'paid') {\r\n//       return (\r\n//         <button\r\n//           className=\"small-button\"\r\n//           onClick={() => navigate(`/salary/history/${empId}`)}\r\n//         >\r\n//           View History\r\n//         </button>\r\n//       );\r\n//     }\r\n  \r\n//     if (status === 'pending') {\r\n//       return (\r\n//         <div className=\"button-group\">\r\n//           <button\r\n//             className=\"small-button\"\r\n//             onClick={() => navigate(`/salary/add-allowance/${empId}`)}\r\n//           >\r\n//             Add Allowance\r\n//           </button>\r\n//           <button\r\n//             className=\"small-button\"\r\n//             onClick={() => navigate(`/salary/add-deduction/${empId}`)}\r\n//           >\r\n//             Add Deduction\r\n//           </button>\r\n//           <button\r\n//             className=\"small-button\"\r\n//             onClick={() => navigate(`/salary/history/${empId}`)}\r\n//           >\r\n//             Generate Payslip\r\n//           </button>\r\n//         </div>\r\n//       );\r\n//     }\r\n  \r\n//     return null;\r\n//   };\r\n  \r\n  \r\n\r\n//   return (\r\n//     <div className=\"employee-list-container\">\r\n//       <h2>Employee List</h2>\r\n//       <table className=\"employee-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>ID</th>\r\n//             <th>Name</th>\r\n//             <th>Email</th>\r\n//             <th>Status</th>\r\n//             <th>Salary Status</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {employees.map((emp) => (\r\n//             <tr key={emp.id}>\r\n//               <td>{emp.id}</td>\r\n//               <td>\r\n//                 <a href={`/employees/${emp.id}`}>\r\n//                   {emp.first_name} {emp.last_name}\r\n//                 </a>\r\n//               </td>\r\n//               <td>{emp.email}</td>\r\n//               <td>{emp.is_active ? 'Active' : 'Inactive'}</td>\r\n//               <td>{renderSalaryStatus(emp.id)}</td>\r\n//               <td>{renderActionButton(emp.id)}</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EmployeeList;\r\n\r\n\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './EmployeeList.css';\r\n\r\nconst EmployeeList = () => {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [salaryMap, setSalaryMap] = useState({});\r\n  const navigate = useNavigate();\r\n  const token = localStorage.getItem('token');\r\n\r\n  const fetchEmployees = useCallback(async () => {\r\n    try {\r\n      const empRes = await axios.get('http://localhost:8000/api/users/', {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      const activeEmployees = empRes.data.filter(emp => emp.is_active);\r\n      activeEmployees.sort((a, b) => a.id - b.id);\r\n      setEmployees(activeEmployees);\r\n\r\n      const salaryMapTemp = {};\r\n      await Promise.all(\r\n        activeEmployees.map(async (emp) => {\r\n          try {\r\n            const res = await axios.get(\r\n              `http://localhost:8000/api/salary/employee_salary_history/${emp.id}/`,\r\n              {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n              }\r\n            );\r\n            const history = res.data;\r\n            if (Array.isArray(history) && history.length > 0) {\r\n              salaryMapTemp[emp.id] = history[0];\r\n            }\r\n          } catch (error) {\r\n            console.warn(`No salary record for user ${emp.id}`);\r\n          }\r\n        })\r\n      );\r\n\r\n      setSalaryMap(salaryMapTemp);\r\n    } catch (error) {\r\n      console.error('Error fetching employees or salary data', error);\r\n    }\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    fetchEmployees();\r\n  }, [fetchEmployees]);\r\n\r\n  const renderSalaryStatus = (empId) => {\r\n    const record = salaryMap[empId];\r\n    if (record) {\r\n      const status = record.salary_status?.toLowerCase();\r\n      if (status === 'paid') return 'Paid';\r\n      if (status === 'pending') return 'Pending';\r\n    }\r\n    return 'Not Generated';\r\n  };\r\n\r\n  const renderActionButton = (empId) => {\r\n    const record = salaryMap[empId];\r\n\r\n    if (!record) {\r\n      return (\r\n        <button\r\n          className=\"small-button\"\r\n          onClick={() => navigate(`/salary/add/${empId}`)}\r\n        >\r\n          Add Salary\r\n        </button>\r\n      );\r\n    }\r\n\r\n    const status = record.salary_status?.toLowerCase();\r\n\r\n    if (status === 'paid') {\r\n      return (\r\n        <button\r\n          className=\"small-button\"\r\n          onClick={() => navigate(`/salary/history/${empId}`)}\r\n        >\r\n          View History\r\n        </button>\r\n      );\r\n    }\r\n\r\n    if (status === 'pending') {\r\n      return (\r\n        <div className=\"button-group\">\r\n          <button\r\n            className=\"small-button\"\r\n            onClick={() => navigate(`/salary/add-allowance/${empId}`)}\r\n          >\r\n            Add Allowance\r\n          </button>\r\n          <button\r\n            className=\"small-button\"\r\n            onClick={() => navigate(`/salary/add-deduction/${empId}`)}\r\n          >\r\n            Add Deduction\r\n          </button>\r\n          <button\r\n            className=\"small-button\"\r\n            onClick={() => navigate(`/salary/history/${empId}`)}\r\n          >\r\n            Generate Payslip\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"employee-list-container\">\r\n      <h2>Employee List</h2>\r\n      <table className=\"employee-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Status</th>\r\n            <th>Salary Status</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {employees.map((emp) => (\r\n            <tr key={emp.id}>\r\n              <td>{emp.id}</td>\r\n              <td>\r\n                <a href={`/employees/${emp.id}`}>\r\n                  {emp.first_name} {emp.last_name}\r\n                </a>\r\n              </td>\r\n              <td>{emp.email}</td>\r\n              <td>{emp.is_active ? 'Active' : 'Inactive'}</td>\r\n              <td>{renderSalaryStatus(emp.id)}</td>\r\n              <td>{renderActionButton(emp.id)}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeList;\r\n"],"mappings":";;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAMY,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}