{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gowth\\\\OneDrive\\\\Desktop\\\\paysphere\\\\PaySphere-Comprehensive-Payroll-Services_Feb_2025\\\\paysphere-frontend\\\\src\\\\pages\\\\Salary\\\\SalaryDetailOfEmp.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useParams } from 'react-router-dom';\n// // optional for styling\n\n// const SalaryDetailOfEmp = () => {\n//   const { id } = useParams(); // employee ID from route\n//   const [salaryHistory, setSalaryHistory] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchSalaryHistory = async () => {\n//       const token = localStorage.getItem('token');\n//       try {\n//         const response = await axios.get(\n//           `http://localhost:8000/api/salary/get_employee_payroll_history/${id}/`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           }\n//         );\n//         setSalaryHistory(response.data);\n//       } catch (error) {\n//         console.error('Failed to fetch salary history', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchSalaryHistory();\n//   }, [id]);\n\n//   return (\n//     <div className=\"salary-history-container\">\n//       <h2>Salary History</h2>\n//       {loading ? (\n//         <p>Loading...</p>\n//       ) : salaryHistory.length === 0 ? (\n//         <p>No salary records found.</p>\n//       ) : (\n//         <table className=\"salary-table\">\n//           <thead>\n//             <tr>\n//               <th>Month</th>\n//               <th>Basic Salary</th>\n//               <th>Allowances</th>\n//               <th>Deductions</th>\n//               <th>Gross Salary</th>\n//               <th>Net Salary</th>\n//               <th>Status</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {salaryHistory.map((salary, index) => {\n//               const date = new Date(salary.created_at);\n//               const month = date.toLocaleString('default', { month: 'short', year: 'numeric' });\n\n//               return (\n//                 <tr key={index}>\n//                   <td>{month}</td>\n//                   <td>₹{salary.basic_salary}</td>\n//                   <td>₹{salary.total_allowances}</td>\n//                   <td>₹{salary.total_deductions}</td>\n//                   <td>₹{salary.gross_salary}</td>\n//                   <td>₹{salary.net_salary}</td>\n//                   <td style={{ color: salary.net_salary ? 'green' : 'red' }}>\n//                     {salary.net_salary ? 'Generated' : 'Pending'}\n//                   </td>\n//                 </tr>\n//               );\n//             })}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SalaryDetailOfEmp;\n\n// src/pages/Salary/SalaryDetailOfEmp.jsx\n\n// import './SalaryDetailOfEmp.css';\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useParams } from 'react-router-dom';\n\n// const SalaryDetailOfEmp = () => {\n//   const { id } = useParams();\n//   const [salaryHistory, setSalaryHistory] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n\n//     const fetchSalaryHistory = async () => {\n//       try {\n//         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_status_list/`, {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setSalaryHistory(res.data);\n//       } catch (error) {\n//         console.error('Failed to fetch salary history', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchSalaryHistory();\n//   }, [id]);\n\n//   return (\n//     <div className=\"salary-history-container\">\n//       <h2>Salary History</h2>\n//       {loading ? (\n//         <p>Loading...</p>\n//       ) : salaryHistory.length === 0 ? (\n//         <p>No salary records found for this employee.</p>\n//       ) : (\n//         <table className=\"salary-history-table\">\n//           <thead>\n//             <tr>\n//               <th>Month</th>\n//               <th>Year</th>\n//               <th>Basic</th>\n//               <th>HRA</th>\n//               <th>Allowances</th>\n//               <th>Deductions</th>\n//               <th>Net Salary</th>\n//               <th>Status</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {salaryHistory.map((record, index) => (\n//               <tr key={index}>\n//                 <td>{record.month}</td>\n//                 <td>{record.year}</td>\n//                 <td>{record.basic}</td>\n//                 <td>{record.hra}</td>\n//                 <td>{record.allowances}</td>\n//                 <td>{record.deductions}</td>\n//                 <td>{record.net_salary}</td>\n//                 <td>{record.is_paid ? 'Paid' : 'Pending'}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SalaryDetailOfEmp;\n\n// import './SalaryDetailOfEmp.css';\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useParams } from 'react-router-dom';\n\n// const SalaryDetailOfEmp = () => {\n//   const { id } = useParams(); // Get employee ID from URL\n//   const [salaryHistory, setSalaryHistory] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n\n//     const fetchSalaryHistory = async () => {\n//       try {\n//         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setSalaryHistory(res.data);\n//       } catch (error) {\n//         console.error('Failed to fetch salary history', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (id) fetchSalaryHistory();\n//   }, [id]);\n\n//   return (\n//     <div className=\"salary-history-container\">\n//       <h2>Salary History</h2>\n//       {loading ? (\n//         <p>Loading...</p>\n//       ) : salaryHistory.length === 0 ? (\n//         <p>No salary records found for this employee.</p>\n//       ) : (\n//         <table className=\"salary-history-table\">\n//   <thead>\n//     <tr>\n//       <th>Month</th>\n//       <th>Year</th>\n//       <th>Basic Salary</th>\n//       <th>Allowances</th>\n//       <th>Deductions</th>\n//       <th>Gross Salary</th>\n//       <th>Net Salary</th>\n//       <th>Status</th>\n//       <th>Payment Date</th>\n//     </tr>\n//   </thead>\n//   <tbody>\n//     {salaryHistory.map((record, index) => (\n//       <tr key={index}>\n//         <td>{record.month || '—'}</td>\n//         <td>{record.year || '—'}</td>\n//         <td>{record.basic_salary || 0}</td>\n//         <td>{record.allowances || 0}</td>\n//         <td>{record.deductions || 0}</td>\n//         <td>{record.gross_salary || 0}</td>\n//         <td>{record.net_salary || 0}</td>\n//         <td>{record.salary_status}</td>\n//         <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\n//       </tr>\n//     ))}\n//   </tbody>\n// </table>\n\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SalaryDetailOfEmp;\n\n// import './SalaryDetailOfEmp.css';\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useParams } from 'react-router-dom';\n\n// const SalaryDetailOfEmp = () => {\n//   const { id } = useParams();\n//   const [salaryHistory, setSalaryHistory] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     const currentDate = new Date();\n//     const currentMonth = currentDate.getMonth() + 1; // 0-indexed\n//     const currentYear = currentDate.getFullYear();\n\n//     const fetchSalaryHistory = async () => {\n//       try {\n//         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n\n//         const filteredData = res.data.filter(record => {\n//           return (\n//             parseInt(record.month) === currentMonth &&\n//             parseInt(record.year) === currentYear\n//           );\n//         });\n\n//         setSalaryHistory(filteredData);\n//       } catch (error) {\n//         console.error('Failed to fetch salary history', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (id) fetchSalaryHistory();\n//   }, [id]);\n\n//   return (\n//     <div className=\"salary-history-container\">\n//       <h2>This Month's Salary History</h2>\n//       {loading ? (\n//         <p>Loading...</p>\n//       ) : salaryHistory.length === 0 ? (\n//         <p>No salary records found for this employee this month.</p>\n//       ) : (\n//         <table className=\"salary-history-table\">\n//           <thead>\n//             <tr>\n//               <th>Month</th>\n//               <th>Year</th>\n//               <th>Basic Salary</th>\n//               <th>Allowances</th>\n//               <th>Deductions</th>\n//               <th>Gross Salary</th>\n//               <th>Net Salary</th>\n//               <th>Status</th>\n//               <th>Payment Date</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {salaryHistory.map((record, index) => (\n//               <tr key={index}>\n//                 <td>{record.month || '—'}</td>\n//                 <td>{record.year || '—'}</td>\n//                 <td>{record.basic_salary || 0}</td>\n//                 <td>{record.allowances || 0}</td>\n//                 <td>{record.deductions || 0}</td>\n//                 <td>{record.gross_salary || 0}</td>\n//                 <td>{record.net_salary || 0}</td>\n//                 <td>{record.salary_status}</td>\n//                 <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SalaryDetailOfEmp;\n\nimport './SalaryDetailOfEmp.css';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SalaryDetailOfEmp = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [salaryHistory, setSalaryHistory] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth(); // 0-indexed\n    const currentYear = currentDate.getFullYear();\n    const fetchSalaryHistory = async () => {\n      try {\n        const res = await axios.get(`http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const filteredData = res.data.filter(record => {\n          const recordDate = new Date(record.created_at);\n          const recordMonth = recordDate.getMonth();\n          const recordYear = recordDate.getFullYear();\n          return recordMonth === currentMonth && recordYear === currentYear;\n        });\n        setSalaryHistory(filteredData);\n      } catch (error) {\n        console.error('Failed to fetch salary history', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (id) fetchSalaryHistory();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"salary-history-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"This Month's Salary History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 9\n    }, this) : salaryHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No salary records found for this employee this month.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"salary-history-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Basic Salary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Allowances\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Deductions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Gross Salary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Net Salary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Payment Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: salaryHistory.map((record, index) => {\n          const recordDate = new Date(record.created_at);\n          const month = recordDate.toLocaleString('default', {\n            month: 'long'\n          });\n          const year = recordDate.getFullYear();\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: month\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: record.basic_salary || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: record.allowances || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: record.deductions || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: record.gross_salary || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: record.net_salary || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: record.salary_status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 5\n  }, this);\n};\n_s(SalaryDetailOfEmp, \"lHMJtTECL1VQfRtLc71i8OcU/uw=\", false, function () {\n  return [useParams];\n});\n_c = SalaryDetailOfEmp;\nexport default SalaryDetailOfEmp;\nvar _c;\n$RefreshReg$(_c, \"SalaryDetailOfEmp\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","jsxDEV","_jsxDEV","SalaryDetailOfEmp","_s","id","salaryHistory","setSalaryHistory","loading","setLoading","token","localStorage","getItem","currentDate","Date","currentMonth","getMonth","currentYear","getFullYear","fetchSalaryHistory","res","get","headers","Authorization","filteredData","data","filter","record","recordDate","created_at","recordMonth","recordYear","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","month","toLocaleString","year","basic_salary","allowances","deductions","gross_salary","net_salary","salary_status","payment_date","toLocaleDateString","_c","$RefreshReg$"],"sources":["C:/Users/gowth/OneDrive/Desktop/paysphere/PaySphere-Comprehensive-Payroll-Services_Feb_2025/paysphere-frontend/src/pages/Salary/SalaryDetailOfEmp.jsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useParams } from 'react-router-dom';\r\n// // optional for styling\r\n\r\n// const SalaryDetailOfEmp = () => {\r\n//   const { id } = useParams(); // employee ID from route\r\n//   const [salaryHistory, setSalaryHistory] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSalaryHistory = async () => {\r\n//       const token = localStorage.getItem('token');\r\n//       try {\r\n//         const response = await axios.get(\r\n//           `http://localhost:8000/api/salary/get_employee_payroll_history/${id}/`,\r\n//           {\r\n//             headers: {\r\n//               Authorization: `Bearer ${token}`,\r\n//             },\r\n//           }\r\n//         );\r\n//         setSalaryHistory(response.data);\r\n//       } catch (error) {\r\n//         console.error('Failed to fetch salary history', error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchSalaryHistory();\r\n//   }, [id]);\r\n\r\n//   return (\r\n//     <div className=\"salary-history-container\">\r\n//       <h2>Salary History</h2>\r\n//       {loading ? (\r\n//         <p>Loading...</p>\r\n//       ) : salaryHistory.length === 0 ? (\r\n//         <p>No salary records found.</p>\r\n//       ) : (\r\n//         <table className=\"salary-table\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Month</th>\r\n//               <th>Basic Salary</th>\r\n//               <th>Allowances</th>\r\n//               <th>Deductions</th>\r\n//               <th>Gross Salary</th>\r\n//               <th>Net Salary</th>\r\n//               <th>Status</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {salaryHistory.map((salary, index) => {\r\n//               const date = new Date(salary.created_at);\r\n//               const month = date.toLocaleString('default', { month: 'short', year: 'numeric' });\r\n\r\n//               return (\r\n//                 <tr key={index}>\r\n//                   <td>{month}</td>\r\n//                   <td>₹{salary.basic_salary}</td>\r\n//                   <td>₹{salary.total_allowances}</td>\r\n//                   <td>₹{salary.total_deductions}</td>\r\n//                   <td>₹{salary.gross_salary}</td>\r\n//                   <td>₹{salary.net_salary}</td>\r\n//                   <td style={{ color: salary.net_salary ? 'green' : 'red' }}>\r\n//                     {salary.net_salary ? 'Generated' : 'Pending'}\r\n//                   </td>\r\n//                 </tr>\r\n//               );\r\n//             })}\r\n//           </tbody>\r\n//         </table>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\n// src/pages/Salary/SalaryDetailOfEmp.jsx\r\n\r\n\r\n// import './SalaryDetailOfEmp.css';\r\n// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const SalaryDetailOfEmp = () => {\r\n//   const { id } = useParams();\r\n//   const [salaryHistory, setSalaryHistory] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n\r\n//     const fetchSalaryHistory = async () => {\r\n//       try {\r\n//         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_status_list/`, {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         });\r\n//         setSalaryHistory(res.data);\r\n//       } catch (error) {\r\n//         console.error('Failed to fetch salary history', error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchSalaryHistory();\r\n//   }, [id]);\r\n\r\n//   return (\r\n//     <div className=\"salary-history-container\">\r\n//       <h2>Salary History</h2>\r\n//       {loading ? (\r\n//         <p>Loading...</p>\r\n//       ) : salaryHistory.length === 0 ? (\r\n//         <p>No salary records found for this employee.</p>\r\n//       ) : (\r\n//         <table className=\"salary-history-table\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Month</th>\r\n//               <th>Year</th>\r\n//               <th>Basic</th>\r\n//               <th>HRA</th>\r\n//               <th>Allowances</th>\r\n//               <th>Deductions</th>\r\n//               <th>Net Salary</th>\r\n//               <th>Status</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {salaryHistory.map((record, index) => (\r\n//               <tr key={index}>\r\n//                 <td>{record.month}</td>\r\n//                 <td>{record.year}</td>\r\n//                 <td>{record.basic}</td>\r\n//                 <td>{record.hra}</td>\r\n//                 <td>{record.allowances}</td>\r\n//                 <td>{record.deductions}</td>\r\n//                 <td>{record.net_salary}</td>\r\n//                 <td>{record.is_paid ? 'Paid' : 'Pending'}</td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\n// import './SalaryDetailOfEmp.css';\r\n// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const SalaryDetailOfEmp = () => {\r\n//   const { id } = useParams(); // Get employee ID from URL\r\n//   const [salaryHistory, setSalaryHistory] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n\r\n//     const fetchSalaryHistory = async () => {\r\n//       try {\r\n//         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         });\r\n//         setSalaryHistory(res.data);\r\n//       } catch (error) {\r\n//         console.error('Failed to fetch salary history', error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     if (id) fetchSalaryHistory();\r\n//   }, [id]);\r\n\r\n//   return (\r\n//     <div className=\"salary-history-container\">\r\n//       <h2>Salary History</h2>\r\n//       {loading ? (\r\n//         <p>Loading...</p>\r\n//       ) : salaryHistory.length === 0 ? (\r\n//         <p>No salary records found for this employee.</p>\r\n//       ) : (\r\n//         <table className=\"salary-history-table\">\r\n//   <thead>\r\n//     <tr>\r\n//       <th>Month</th>\r\n//       <th>Year</th>\r\n//       <th>Basic Salary</th>\r\n//       <th>Allowances</th>\r\n//       <th>Deductions</th>\r\n//       <th>Gross Salary</th>\r\n//       <th>Net Salary</th>\r\n//       <th>Status</th>\r\n//       <th>Payment Date</th>\r\n//     </tr>\r\n//   </thead>\r\n//   <tbody>\r\n//     {salaryHistory.map((record, index) => (\r\n//       <tr key={index}>\r\n//         <td>{record.month || '—'}</td>\r\n//         <td>{record.year || '—'}</td>\r\n//         <td>{record.basic_salary || 0}</td>\r\n//         <td>{record.allowances || 0}</td>\r\n//         <td>{record.deductions || 0}</td>\r\n//         <td>{record.gross_salary || 0}</td>\r\n//         <td>{record.net_salary || 0}</td>\r\n//         <td>{record.salary_status}</td>\r\n//         <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\r\n//       </tr>\r\n//     ))}\r\n//   </tbody>\r\n// </table>\r\n\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\n// import './SalaryDetailOfEmp.css';\r\n// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const SalaryDetailOfEmp = () => {\r\n//   const { id } = useParams();\r\n//   const [salaryHistory, setSalaryHistory] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     const currentDate = new Date();\r\n//     const currentMonth = currentDate.getMonth() + 1; // 0-indexed\r\n//     const currentYear = currentDate.getFullYear();\r\n\r\n//     const fetchSalaryHistory = async () => {\r\n//       try {\r\n//         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         });\r\n\r\n//         const filteredData = res.data.filter(record => {\r\n//           return (\r\n//             parseInt(record.month) === currentMonth &&\r\n//             parseInt(record.year) === currentYear\r\n//           );\r\n//         });\r\n\r\n//         setSalaryHistory(filteredData);\r\n//       } catch (error) {\r\n//         console.error('Failed to fetch salary history', error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     if (id) fetchSalaryHistory();\r\n//   }, [id]);\r\n\r\n//   return (\r\n//     <div className=\"salary-history-container\">\r\n//       <h2>This Month's Salary History</h2>\r\n//       {loading ? (\r\n//         <p>Loading...</p>\r\n//       ) : salaryHistory.length === 0 ? (\r\n//         <p>No salary records found for this employee this month.</p>\r\n//       ) : (\r\n//         <table className=\"salary-history-table\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Month</th>\r\n//               <th>Year</th>\r\n//               <th>Basic Salary</th>\r\n//               <th>Allowances</th>\r\n//               <th>Deductions</th>\r\n//               <th>Gross Salary</th>\r\n//               <th>Net Salary</th>\r\n//               <th>Status</th>\r\n//               <th>Payment Date</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {salaryHistory.map((record, index) => (\r\n//               <tr key={index}>\r\n//                 <td>{record.month || '—'}</td>\r\n//                 <td>{record.year || '—'}</td>\r\n//                 <td>{record.basic_salary || 0}</td>\r\n//                 <td>{record.allowances || 0}</td>\r\n//                 <td>{record.deductions || 0}</td>\r\n//                 <td>{record.gross_salary || 0}</td>\r\n//                 <td>{record.net_salary || 0}</td>\r\n//                 <td>{record.salary_status}</td>\r\n//                 <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SalaryDetailOfEmp;\r\n\r\n\r\nimport './SalaryDetailOfEmp.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst SalaryDetailOfEmp = () => {\r\n  const { id } = useParams();\r\n  const [salaryHistory, setSalaryHistory] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const currentDate = new Date();\r\n    const currentMonth = currentDate.getMonth(); // 0-indexed\r\n    const currentYear = currentDate.getFullYear();\r\n\r\n    const fetchSalaryHistory = async () => {\r\n      try {\r\n        const res = await axios.get(\r\n          `http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        );\r\n\r\n        const filteredData = res.data.filter(record => {\r\n          const recordDate = new Date(record.created_at);\r\n          const recordMonth = recordDate.getMonth();\r\n          const recordYear = recordDate.getFullYear();\r\n\r\n          return recordMonth === currentMonth && recordYear === currentYear;\r\n        });\r\n\r\n        setSalaryHistory(filteredData);\r\n      } catch (error) {\r\n        console.error('Failed to fetch salary history', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (id) fetchSalaryHistory();\r\n  }, [id]);\r\n\r\n  return (\r\n    <div className=\"salary-history-container\">\r\n      <h2>This Month's Salary History</h2>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : salaryHistory.length === 0 ? (\r\n        <p>No salary records found for this employee this month.</p>\r\n      ) : (\r\n        <table className=\"salary-history-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Month</th>\r\n              <th>Year</th>\r\n              <th>Basic Salary</th>\r\n              <th>Allowances</th>\r\n              <th>Deductions</th>\r\n              <th>Gross Salary</th>\r\n              <th>Net Salary</th>\r\n              <th>Status</th>\r\n              <th>Payment Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {salaryHistory.map((record, index) => {\r\n              const recordDate = new Date(record.created_at);\r\n              const month = recordDate.toLocaleString('default', { month: 'long' });\r\n              const year = recordDate.getFullYear();\r\n\r\n              return (\r\n                <tr key={index}>\r\n                  <td>{month}</td>\r\n                  <td>{year}</td>\r\n                  <td>{record.basic_salary || 0}</td>\r\n                  <td>{record.allowances || 0}</td>\r\n                  <td>{record.deductions || 0}</td>\r\n                  <td>{record.gross_salary || 0}</td>\r\n                  <td>{record.net_salary || 0}</td>\r\n                  <td>{record.salary_status}</td>\r\n                  <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SalaryDetailOfEmp;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAO,yBAAyB;AAChC,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMa,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC9B,MAAMC,YAAY,GAAGF,WAAW,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7C,MAAMC,WAAW,GAAGJ,WAAW,CAACK,WAAW,CAAC,CAAC;IAE7C,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CACzB,4DAA4DhB,EAAE,GAAG,EACjE;UACEiB,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUb,KAAK;UAAG;QAC9C,CACF,CAAC;QAED,MAAMc,YAAY,GAAGJ,GAAG,CAACK,IAAI,CAACC,MAAM,CAACC,MAAM,IAAI;UAC7C,MAAMC,UAAU,GAAG,IAAId,IAAI,CAACa,MAAM,CAACE,UAAU,CAAC;UAC9C,MAAMC,WAAW,GAAGF,UAAU,CAACZ,QAAQ,CAAC,CAAC;UACzC,MAAMe,UAAU,GAAGH,UAAU,CAACV,WAAW,CAAC,CAAC;UAE3C,OAAOY,WAAW,KAAKf,YAAY,IAAIgB,UAAU,KAAKd,WAAW;QACnE,CAAC,CAAC;QAEFV,gBAAgB,CAACiB,YAAY,CAAC;MAChC,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD,CAAC,SAAS;QACRvB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED,IAAIJ,EAAE,EAAEc,kBAAkB,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACd,EAAE,CAAC,CAAC;EAER,oBACEH,OAAA;IAAKgC,SAAS,EAAC,0BAA0B;IAAAC,QAAA,gBACvCjC,OAAA;MAAAiC,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnC/B,OAAO,gBACNN,OAAA;MAAAiC,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GACfjC,aAAa,CAACkC,MAAM,KAAK,CAAC,gBAC5BtC,OAAA;MAAAiC,QAAA,EAAG;IAAqD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE5DrC,OAAA;MAAOgC,SAAS,EAAC,sBAAsB;MAAAC,QAAA,gBACrCjC,OAAA;QAAAiC,QAAA,eACEjC,OAAA;UAAAiC,QAAA,gBACEjC,OAAA;YAAAiC,QAAA,EAAI;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACdrC,OAAA;YAAAiC,QAAA,EAAI;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACbrC,OAAA;YAAAiC,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrBrC,OAAA;YAAAiC,QAAA,EAAI;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnBrC,OAAA;YAAAiC,QAAA,EAAI;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnBrC,OAAA;YAAAiC,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrBrC,OAAA;YAAAiC,QAAA,EAAI;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnBrC,OAAA;YAAAiC,QAAA,EAAI;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACfrC,OAAA;YAAAiC,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRrC,OAAA;QAAAiC,QAAA,EACG7B,aAAa,CAACmC,GAAG,CAAC,CAACd,MAAM,EAAEe,KAAK,KAAK;UACpC,MAAMd,UAAU,GAAG,IAAId,IAAI,CAACa,MAAM,CAACE,UAAU,CAAC;UAC9C,MAAMc,KAAK,GAAGf,UAAU,CAACgB,cAAc,CAAC,SAAS,EAAE;YAAED,KAAK,EAAE;UAAO,CAAC,CAAC;UACrE,MAAME,IAAI,GAAGjB,UAAU,CAACV,WAAW,CAAC,CAAC;UAErC,oBACEhB,OAAA;YAAAiC,QAAA,gBACEjC,OAAA;cAAAiC,QAAA,EAAKQ;YAAK;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAChBrC,OAAA;cAAAiC,QAAA,EAAKU;YAAI;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACfrC,OAAA;cAAAiC,QAAA,EAAKR,MAAM,CAACmB,YAAY,IAAI;YAAC;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACnCrC,OAAA;cAAAiC,QAAA,EAAKR,MAAM,CAACoB,UAAU,IAAI;YAAC;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACjCrC,OAAA;cAAAiC,QAAA,EAAKR,MAAM,CAACqB,UAAU,IAAI;YAAC;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACjCrC,OAAA;cAAAiC,QAAA,EAAKR,MAAM,CAACsB,YAAY,IAAI;YAAC;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACnCrC,OAAA;cAAAiC,QAAA,EAAKR,MAAM,CAACuB,UAAU,IAAI;YAAC;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACjCrC,OAAA;cAAAiC,QAAA,EAAKR,MAAM,CAACwB;YAAa;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC/BrC,OAAA;cAAAiC,QAAA,EAAKR,MAAM,CAACyB,YAAY,GAAG,IAAItC,IAAI,CAACa,MAAM,CAACyB,YAAY,CAAC,CAACC,kBAAkB,CAAC,CAAC,GAAG;YAAG;cAAAjB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GATlFG,KAAK;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAUV,CAAC;QAET,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnC,EAAA,CAtFID,iBAAiB;EAAA,QACNH,SAAS;AAAA;AAAAsD,EAAA,GADpBnD,iBAAiB;AAwFvB,eAAeA,iBAAiB;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}