{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gowth\\\\OneDrive\\\\Desktop\\\\paysphere\\\\PaySphere-Comprehensive-Payroll-Services_Feb_2025\\\\paysphere-frontend\\\\src\\\\pages\\\\Salary\\\\SalaryDetailOfEmp.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import { useParams } from 'react-router-dom';\n// // // optional for styling\n\n// // const SalaryDetailOfEmp = () => {\n// //   const { id } = useParams(); // employee ID from route\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     const fetchSalaryHistory = async () => {\n// //       const token = localStorage.getItem('token');\n// //       try {\n// //         const response = await axios.get(\n// //           `http://localhost:8000/api/salary/get_employee_payroll_history/${id}/`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${token}`,\n// //             },\n// //           }\n// //         );\n// //         setSalaryHistory(response.data);\n// //       } catch (error) {\n// //         console.error('Failed to fetch salary history', error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchSalaryHistory();\n// //   }, [id]);\n\n// //   return (\n// //     <div className=\"salary-history-container\">\n// //       <h2>Salary History</h2>\n// //       {loading ? (\n// //         <p>Loading...</p>\n// //       ) : salaryHistory.length === 0 ? (\n// //         <p>No salary records found.</p>\n// //       ) : (\n// //         <table className=\"salary-table\">\n// //           <thead>\n// //             <tr>\n// //               <th>Month</th>\n// //               <th>Basic Salary</th>\n// //               <th>Allowances</th>\n// //               <th>Deductions</th>\n// //               <th>Gross Salary</th>\n// //               <th>Net Salary</th>\n// //               <th>Status</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {salaryHistory.map((salary, index) => {\n// //               const date = new Date(salary.created_at);\n// //               const month = date.toLocaleString('default', { month: 'short', year: 'numeric' });\n\n// //               return (\n// //                 <tr key={index}>\n// //                   <td>{month}</td>\n// //                   <td>₹{salary.basic_salary}</td>\n// //                   <td>₹{salary.total_allowances}</td>\n// //                   <td>₹{salary.total_deductions}</td>\n// //                   <td>₹{salary.gross_salary}</td>\n// //                   <td>₹{salary.net_salary}</td>\n// //                   <td style={{ color: salary.net_salary ? 'green' : 'red' }}>\n// //                     {salary.net_salary ? 'Generated' : 'Pending'}\n// //                   </td>\n// //                 </tr>\n// //               );\n// //             })}\n// //           </tbody>\n// //         </table>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SalaryDetailOfEmp;\n\n// // src/pages/Salary/SalaryDetailOfEmp.jsx\n\n// // import './SalaryDetailOfEmp.css';\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import { useParams } from 'react-router-dom';\n\n// // const SalaryDetailOfEmp = () => {\n// //   const { id } = useParams();\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n\n// //     const fetchSalaryHistory = async () => {\n// //       try {\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_status_list/`, {\n// //           headers: { Authorization: `Bearer ${token}` },\n// //         });\n// //         setSalaryHistory(res.data);\n// //       } catch (error) {\n// //         console.error('Failed to fetch salary history', error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchSalaryHistory();\n// //   }, [id]);\n\n// //   return (\n// //     <div className=\"salary-history-container\">\n// //       <h2>Salary History</h2>\n// //       {loading ? (\n// //         <p>Loading...</p>\n// //       ) : salaryHistory.length === 0 ? (\n// //         <p>No salary records found for this employee.</p>\n// //       ) : (\n// //         <table className=\"salary-history-table\">\n// //           <thead>\n// //             <tr>\n// //               <th>Month</th>\n// //               <th>Year</th>\n// //               <th>Basic</th>\n// //               <th>HRA</th>\n// //               <th>Allowances</th>\n// //               <th>Deductions</th>\n// //               <th>Net Salary</th>\n// //               <th>Status</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {salaryHistory.map((record, index) => (\n// //               <tr key={index}>\n// //                 <td>{record.month}</td>\n// //                 <td>{record.year}</td>\n// //                 <td>{record.basic}</td>\n// //                 <td>{record.hra}</td>\n// //                 <td>{record.allowances}</td>\n// //                 <td>{record.deductions}</td>\n// //                 <td>{record.net_salary}</td>\n// //                 <td>{record.is_paid ? 'Paid' : 'Pending'}</td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SalaryDetailOfEmp;\n\n// // import './SalaryDetailOfEmp.css';\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import { useParams } from 'react-router-dom';\n\n// // const SalaryDetailOfEmp = () => {\n// //   const { id } = useParams(); // Get employee ID from URL\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n\n// //     const fetchSalaryHistory = async () => {\n// //       try {\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\n// //           headers: { Authorization: `Bearer ${token}` },\n// //         });\n// //         setSalaryHistory(res.data);\n// //       } catch (error) {\n// //         console.error('Failed to fetch salary history', error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     if (id) fetchSalaryHistory();\n// //   }, [id]);\n\n// //   return (\n// //     <div className=\"salary-history-container\">\n// //       <h2>Salary History</h2>\n// //       {loading ? (\n// //         <p>Loading...</p>\n// //       ) : salaryHistory.length === 0 ? (\n// //         <p>No salary records found for this employee.</p>\n// //       ) : (\n// //         <table className=\"salary-history-table\">\n// //   <thead>\n// //     <tr>\n// //       <th>Month</th>\n// //       <th>Year</th>\n// //       <th>Basic Salary</th>\n// //       <th>Allowances</th>\n// //       <th>Deductions</th>\n// //       <th>Gross Salary</th>\n// //       <th>Net Salary</th>\n// //       <th>Status</th>\n// //       <th>Payment Date</th>\n// //     </tr>\n// //   </thead>\n// //   <tbody>\n// //     {salaryHistory.map((record, index) => (\n// //       <tr key={index}>\n// //         <td>{record.month || '—'}</td>\n// //         <td>{record.year || '—'}</td>\n// //         <td>{record.basic_salary || 0}</td>\n// //         <td>{record.allowances || 0}</td>\n// //         <td>{record.deductions || 0}</td>\n// //         <td>{record.gross_salary || 0}</td>\n// //         <td>{record.net_salary || 0}</td>\n// //         <td>{record.salary_status}</td>\n// //         <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\n// //       </tr>\n// //     ))}\n// //   </tbody>\n// // </table>\n\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SalaryDetailOfEmp;\n\n// // import './SalaryDetailOfEmp.css';\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import { useParams } from 'react-router-dom';\n\n// // const SalaryDetailOfEmp = () => {\n// //   const { id } = useParams();\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     const currentDate = new Date();\n// //     const currentMonth = currentDate.getMonth() + 1; // 0-indexed\n// //     const currentYear = currentDate.getFullYear();\n\n// //     const fetchSalaryHistory = async () => {\n// //       try {\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\n// //           headers: { Authorization: `Bearer ${token}` },\n// //         });\n\n// //         const filteredData = res.data.filter(record => {\n// //           return (\n// //             parseInt(record.month) === currentMonth &&\n// //             parseInt(record.year) === currentYear\n// //           );\n// //         });\n\n// //         setSalaryHistory(filteredData);\n// //       } catch (error) {\n// //         console.error('Failed to fetch salary history', error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     if (id) fetchSalaryHistory();\n// //   }, [id]);\n\n// //   return (\n// //     <div className=\"salary-history-container\">\n// //       <h2>This Month's Salary History</h2>\n// //       {loading ? (\n// //         <p>Loading...</p>\n// //       ) : salaryHistory.length === 0 ? (\n// //         <p>No salary records found for this employee this month.</p>\n// //       ) : (\n// //         <table className=\"salary-history-table\">\n// //           <thead>\n// //             <tr>\n// //               <th>Month</th>\n// //               <th>Year</th>\n// //               <th>Basic Salary</th>\n// //               <th>Allowances</th>\n// //               <th>Deductions</th>\n// //               <th>Gross Salary</th>\n// //               <th>Net Salary</th>\n// //               <th>Status</th>\n// //               <th>Payment Date</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {salaryHistory.map((record, index) => (\n// //               <tr key={index}>\n// //                 <td>{record.month || '—'}</td>\n// //                 <td>{record.year || '—'}</td>\n// //                 <td>{record.basic_salary || 0}</td>\n// //                 <td>{record.allowances || 0}</td>\n// //                 <td>{record.deductions || 0}</td>\n// //                 <td>{record.gross_salary || 0}</td>\n// //                 <td>{record.net_salary || 0}</td>\n// //                 <td>{record.salary_status}</td>\n// //                 <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SalaryDetailOfEmp;\n\n// import './SalaryDetailOfEmp.css';\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useParams } from 'react-router-dom';\n\n// const SalaryDetailOfEmp = () => {\n//   const { id } = useParams();\n//   const [salaryHistory, setSalaryHistory] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     const currentDate = new Date();\n//     const currentMonth = currentDate.getMonth(); // 0-indexed\n//     const currentYear = currentDate.getFullYear();\n\n//     const fetchSalaryHistory = async () => {\n//       try {\n//         const res = await axios.get(\n//           `http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`,\n//           {\n//             headers: { Authorization: `Bearer ${token}` },\n//           }\n//         );\n\n//         const filteredData = res.data.filter(record => {\n//           const recordDate = new Date(record.created_at);\n//           const recordMonth = recordDate.getMonth();\n//           const recordYear = recordDate.getFullYear();\n\n//           return recordMonth === currentMonth && recordYear === currentYear;\n//         });\n\n//         setSalaryHistory(filteredData);\n//       } catch (error) {\n//         console.error('Failed to fetch salary history', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (id) fetchSalaryHistory();\n//   }, [id]);\n\n//   return (\n//     <div className=\"salary-history-container\">\n//       <h2>This Month's Salary History</h2>\n//       {loading ? (\n//         <p>Loading...</p>\n//       ) : salaryHistory.length === 0 ? (\n//         <p>No salary records found for this employee this month.</p>\n//       ) : (\n//         <table className=\"salary-history-table\">\n//           <thead>\n//             <tr>\n//               <th>Month</th>\n//               <th>Year</th>\n//               <th>Basic Salary</th>\n//               <th>Allowances</th>\n//               <th>Deductions</th>\n//               <th>Gross Salary</th>\n//               <th>Net Salary</th>\n//               <th>Status</th>\n//               <th>Payment Date</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {salaryHistory.map((record, index) => {\n//               const recordDate = new Date(record.created_at);\n//               const month = recordDate.toLocaleString('default', { month: 'long' });\n//               const year = recordDate.getFullYear();\n\n//               return (\n//                 <tr key={index}>\n//                   <td>{month}</td>\n//                   <td>{year}</td>\n//                   <td>{record.basic_salary || 0}</td>\n//                   <td>{record.allowances || 0}</td>\n//                   <td>{record.deductions || 0}</td>\n//                   <td>{record.gross_salary || 0}</td>\n//                   <td>{record.net_salary || 0}</td>\n//                   <td>{record.salary_status}</td>\n//                   <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\n//                 </tr>\n//               );\n//             })}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SalaryDetailOfEmp;\n\nimport './SalaryDetailOfEmp.css';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SalaryDetailOfEmp = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [salaryHistory, setSalaryHistory] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [generatingPayslip, setGeneratingPayslip] = useState(false);\n  const [message, setMessage] = useState(''); // State for message\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth(); // 0-indexed\n    const currentYear = currentDate.getFullYear();\n    const fetchSalaryHistory = async () => {\n      try {\n        const res = await axios.get(`http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const filteredData = res.data.filter(record => {\n          const recordDate = new Date(record.created_at);\n          const recordMonth = recordDate.getMonth();\n          const recordYear = recordDate.getFullYear();\n          return recordMonth === currentMonth && recordYear === currentYear;\n        });\n        setSalaryHistory(filteredData);\n      } catch (error) {\n        console.error('Failed to fetch salary history', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (id) fetchSalaryHistory();\n  }, [id]);\n\n  // Handle \"Generate Payslip\" button click\n  const handleGeneratePayslip = async employeeId => {\n    setGeneratingPayslip(true);\n    setMessage('');\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.put(`http://127.0.0.1:8000/api/salary/generate_payslip/${employeeId}/`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n\n      // Download Payslip\n      const blob = new Blob([response.data], {\n        type: 'application/pdf'\n      });\n      const link = document.createElement('a');\n      link.href = URL.createObjectURL(blob);\n      link.click();\n      setMessage('Payslip generated successfully and download started.');\n\n      // ✅ Re-fetch salary history to get updated status and payment date\n      const updatedRes = await axios.get(`http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const currentDate = new Date();\n      const currentMonth = currentDate.getMonth();\n      const currentYear = currentDate.getFullYear();\n      const filteredData = updatedRes.data.filter(record => {\n        const recordDate = new Date(record.created_at);\n        const recordMonth = recordDate.getMonth();\n        const recordYear = recordDate.getFullYear();\n        return recordMonth === currentMonth && recordYear === currentYear;\n      });\n      setSalaryHistory(filteredData);\n    } catch (error) {\n      console.error('Failed to generate payslip', error);\n      setMessage('Failed to generate payslip. Please try again.');\n    } finally {\n      setGeneratingPayslip(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"salary-history-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Current Month Salary Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 9\n    }, this) : salaryHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No salary records found for this employee this month.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"salary-history-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 535,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Basic Salary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Allowances\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Deductions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Gross Salary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Net Salary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Payment Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: salaryHistory.map((record, index) => {\n            const recordDate = new Date(record.created_at);\n            const month = recordDate.toLocaleString('default', {\n              month: 'long'\n            });\n            const year = recordDate.getFullYear();\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: month\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: year\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 555,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: record.basic_salary || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: record.allowances || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 557,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: record.deductions || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: record.gross_salary || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: record.net_salary || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 560,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: record.salary_status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 561,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 562,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: record.salary_status === 'Pending' && /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"generate-payslip-btn\",\n                  onClick: () => handleGeneratePayslip(record.id),\n                  disabled: generatingPayslip,\n                  children: generatingPayslip ? 'Generating...' : 'Generate Payslip'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 565,\n                  columnNumber: 5\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 523,\n    columnNumber: 5\n  }, this);\n};\n_s(SalaryDetailOfEmp, \"oTPkYfoKMBsbByEIQ6iNm+oLL60=\", false, function () {\n  return [useParams];\n});\n_c = SalaryDetailOfEmp;\nexport default SalaryDetailOfEmp;\nvar _c;\n$RefreshReg$(_c, \"SalaryDetailOfEmp\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","SalaryDetailOfEmp","_s","id","salaryHistory","setSalaryHistory","loading","setLoading","generatingPayslip","setGeneratingPayslip","message","setMessage","token","localStorage","getItem","currentDate","Date","currentMonth","getMonth","currentYear","getFullYear","fetchSalaryHistory","res","get","headers","Authorization","filteredData","data","filter","record","recordDate","created_at","recordMonth","recordYear","error","console","handleGeneratePayslip","employeeId","response","put","responseType","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","click","updatedRes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","month","toLocaleString","year","basic_salary","allowances","deductions","gross_salary","net_salary","salary_status","payment_date","toLocaleDateString","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/gowth/OneDrive/Desktop/paysphere/PaySphere-Comprehensive-Payroll-Services_Feb_2025/paysphere-frontend/src/pages/Salary/SalaryDetailOfEmp.jsx"],"sourcesContent":["// // import React, { useEffect, useState } from 'react';\r\n// // import axios from 'axios';\r\n// // import { useParams } from 'react-router-dom';\r\n// // // optional for styling\r\n\r\n// // const SalaryDetailOfEmp = () => {\r\n// //   const { id } = useParams(); // employee ID from route\r\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchSalaryHistory = async () => {\r\n// //       const token = localStorage.getItem('token');\r\n// //       try {\r\n// //         const response = await axios.get(\r\n// //           `http://localhost:8000/api/salary/get_employee_payroll_history/${id}/`,\r\n// //           {\r\n// //             headers: {\r\n// //               Authorization: `Bearer ${token}`,\r\n// //             },\r\n// //           }\r\n// //         );\r\n// //         setSalaryHistory(response.data);\r\n// //       } catch (error) {\r\n// //         console.error('Failed to fetch salary history', error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchSalaryHistory();\r\n// //   }, [id]);\r\n\r\n// //   return (\r\n// //     <div className=\"salary-history-container\">\r\n// //       <h2>Salary History</h2>\r\n// //       {loading ? (\r\n// //         <p>Loading...</p>\r\n// //       ) : salaryHistory.length === 0 ? (\r\n// //         <p>No salary records found.</p>\r\n// //       ) : (\r\n// //         <table className=\"salary-table\">\r\n// //           <thead>\r\n// //             <tr>\r\n// //               <th>Month</th>\r\n// //               <th>Basic Salary</th>\r\n// //               <th>Allowances</th>\r\n// //               <th>Deductions</th>\r\n// //               <th>Gross Salary</th>\r\n// //               <th>Net Salary</th>\r\n// //               <th>Status</th>\r\n// //             </tr>\r\n// //           </thead>\r\n// //           <tbody>\r\n// //             {salaryHistory.map((salary, index) => {\r\n// //               const date = new Date(salary.created_at);\r\n// //               const month = date.toLocaleString('default', { month: 'short', year: 'numeric' });\r\n\r\n// //               return (\r\n// //                 <tr key={index}>\r\n// //                   <td>{month}</td>\r\n// //                   <td>₹{salary.basic_salary}</td>\r\n// //                   <td>₹{salary.total_allowances}</td>\r\n// //                   <td>₹{salary.total_deductions}</td>\r\n// //                   <td>₹{salary.gross_salary}</td>\r\n// //                   <td>₹{salary.net_salary}</td>\r\n// //                   <td style={{ color: salary.net_salary ? 'green' : 'red' }}>\r\n// //                     {salary.net_salary ? 'Generated' : 'Pending'}\r\n// //                   </td>\r\n// //                 </tr>\r\n// //               );\r\n// //             })}\r\n// //           </tbody>\r\n// //         </table>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\n// // src/pages/Salary/SalaryDetailOfEmp.jsx\r\n\r\n\r\n// // import './SalaryDetailOfEmp.css';\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import axios from 'axios';\r\n// // import { useParams } from 'react-router-dom';\r\n\r\n// // const SalaryDetailOfEmp = () => {\r\n// //   const { id } = useParams();\r\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n\r\n// //     const fetchSalaryHistory = async () => {\r\n// //       try {\r\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_status_list/`, {\r\n// //           headers: { Authorization: `Bearer ${token}` },\r\n// //         });\r\n// //         setSalaryHistory(res.data);\r\n// //       } catch (error) {\r\n// //         console.error('Failed to fetch salary history', error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchSalaryHistory();\r\n// //   }, [id]);\r\n\r\n// //   return (\r\n// //     <div className=\"salary-history-container\">\r\n// //       <h2>Salary History</h2>\r\n// //       {loading ? (\r\n// //         <p>Loading...</p>\r\n// //       ) : salaryHistory.length === 0 ? (\r\n// //         <p>No salary records found for this employee.</p>\r\n// //       ) : (\r\n// //         <table className=\"salary-history-table\">\r\n// //           <thead>\r\n// //             <tr>\r\n// //               <th>Month</th>\r\n// //               <th>Year</th>\r\n// //               <th>Basic</th>\r\n// //               <th>HRA</th>\r\n// //               <th>Allowances</th>\r\n// //               <th>Deductions</th>\r\n// //               <th>Net Salary</th>\r\n// //               <th>Status</th>\r\n// //             </tr>\r\n// //           </thead>\r\n// //           <tbody>\r\n// //             {salaryHistory.map((record, index) => (\r\n// //               <tr key={index}>\r\n// //                 <td>{record.month}</td>\r\n// //                 <td>{record.year}</td>\r\n// //                 <td>{record.basic}</td>\r\n// //                 <td>{record.hra}</td>\r\n// //                 <td>{record.allowances}</td>\r\n// //                 <td>{record.deductions}</td>\r\n// //                 <td>{record.net_salary}</td>\r\n// //                 <td>{record.is_paid ? 'Paid' : 'Pending'}</td>\r\n// //               </tr>\r\n// //             ))}\r\n// //           </tbody>\r\n// //         </table>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\n// // import './SalaryDetailOfEmp.css';\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import axios from 'axios';\r\n// // import { useParams } from 'react-router-dom';\r\n\r\n// // const SalaryDetailOfEmp = () => {\r\n// //   const { id } = useParams(); // Get employee ID from URL\r\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n\r\n// //     const fetchSalaryHistory = async () => {\r\n// //       try {\r\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\r\n// //           headers: { Authorization: `Bearer ${token}` },\r\n// //         });\r\n// //         setSalaryHistory(res.data);\r\n// //       } catch (error) {\r\n// //         console.error('Failed to fetch salary history', error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     if (id) fetchSalaryHistory();\r\n// //   }, [id]);\r\n\r\n// //   return (\r\n// //     <div className=\"salary-history-container\">\r\n// //       <h2>Salary History</h2>\r\n// //       {loading ? (\r\n// //         <p>Loading...</p>\r\n// //       ) : salaryHistory.length === 0 ? (\r\n// //         <p>No salary records found for this employee.</p>\r\n// //       ) : (\r\n// //         <table className=\"salary-history-table\">\r\n// //   <thead>\r\n// //     <tr>\r\n// //       <th>Month</th>\r\n// //       <th>Year</th>\r\n// //       <th>Basic Salary</th>\r\n// //       <th>Allowances</th>\r\n// //       <th>Deductions</th>\r\n// //       <th>Gross Salary</th>\r\n// //       <th>Net Salary</th>\r\n// //       <th>Status</th>\r\n// //       <th>Payment Date</th>\r\n// //     </tr>\r\n// //   </thead>\r\n// //   <tbody>\r\n// //     {salaryHistory.map((record, index) => (\r\n// //       <tr key={index}>\r\n// //         <td>{record.month || '—'}</td>\r\n// //         <td>{record.year || '—'}</td>\r\n// //         <td>{record.basic_salary || 0}</td>\r\n// //         <td>{record.allowances || 0}</td>\r\n// //         <td>{record.deductions || 0}</td>\r\n// //         <td>{record.gross_salary || 0}</td>\r\n// //         <td>{record.net_salary || 0}</td>\r\n// //         <td>{record.salary_status}</td>\r\n// //         <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\r\n// //       </tr>\r\n// //     ))}\r\n// //   </tbody>\r\n// // </table>\r\n\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\n// // import './SalaryDetailOfEmp.css';\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import axios from 'axios';\r\n// // import { useParams } from 'react-router-dom';\r\n\r\n// // const SalaryDetailOfEmp = () => {\r\n// //   const { id } = useParams();\r\n// //   const [salaryHistory, setSalaryHistory] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem('token');\r\n// //     const currentDate = new Date();\r\n// //     const currentMonth = currentDate.getMonth() + 1; // 0-indexed\r\n// //     const currentYear = currentDate.getFullYear();\r\n\r\n// //     const fetchSalaryHistory = async () => {\r\n// //       try {\r\n// //         const res = await axios.get(`http://localhost:8000/api/salary/employee_salary_history/${id}/`, {\r\n// //           headers: { Authorization: `Bearer ${token}` },\r\n// //         });\r\n\r\n// //         const filteredData = res.data.filter(record => {\r\n// //           return (\r\n// //             parseInt(record.month) === currentMonth &&\r\n// //             parseInt(record.year) === currentYear\r\n// //           );\r\n// //         });\r\n\r\n// //         setSalaryHistory(filteredData);\r\n// //       } catch (error) {\r\n// //         console.error('Failed to fetch salary history', error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     if (id) fetchSalaryHistory();\r\n// //   }, [id]);\r\n\r\n// //   return (\r\n// //     <div className=\"salary-history-container\">\r\n// //       <h2>This Month's Salary History</h2>\r\n// //       {loading ? (\r\n// //         <p>Loading...</p>\r\n// //       ) : salaryHistory.length === 0 ? (\r\n// //         <p>No salary records found for this employee this month.</p>\r\n// //       ) : (\r\n// //         <table className=\"salary-history-table\">\r\n// //           <thead>\r\n// //             <tr>\r\n// //               <th>Month</th>\r\n// //               <th>Year</th>\r\n// //               <th>Basic Salary</th>\r\n// //               <th>Allowances</th>\r\n// //               <th>Deductions</th>\r\n// //               <th>Gross Salary</th>\r\n// //               <th>Net Salary</th>\r\n// //               <th>Status</th>\r\n// //               <th>Payment Date</th>\r\n// //             </tr>\r\n// //           </thead>\r\n// //           <tbody>\r\n// //             {salaryHistory.map((record, index) => (\r\n// //               <tr key={index}>\r\n// //                 <td>{record.month || '—'}</td>\r\n// //                 <td>{record.year || '—'}</td>\r\n// //                 <td>{record.basic_salary || 0}</td>\r\n// //                 <td>{record.allowances || 0}</td>\r\n// //                 <td>{record.deductions || 0}</td>\r\n// //                 <td>{record.gross_salary || 0}</td>\r\n// //                 <td>{record.net_salary || 0}</td>\r\n// //                 <td>{record.salary_status}</td>\r\n// //                 <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\r\n// //               </tr>\r\n// //             ))}\r\n// //           </tbody>\r\n// //         </table>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default SalaryDetailOfEmp;\r\n\r\n\r\n// import './SalaryDetailOfEmp.css';\r\n// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const SalaryDetailOfEmp = () => {\r\n//   const { id } = useParams();\r\n//   const [salaryHistory, setSalaryHistory] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     const currentDate = new Date();\r\n//     const currentMonth = currentDate.getMonth(); // 0-indexed\r\n//     const currentYear = currentDate.getFullYear();\r\n\r\n//     const fetchSalaryHistory = async () => {\r\n//       try {\r\n//         const res = await axios.get(\r\n//           `http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`,\r\n//           {\r\n//             headers: { Authorization: `Bearer ${token}` },\r\n//           }\r\n//         );\r\n\r\n//         const filteredData = res.data.filter(record => {\r\n//           const recordDate = new Date(record.created_at);\r\n//           const recordMonth = recordDate.getMonth();\r\n//           const recordYear = recordDate.getFullYear();\r\n\r\n//           return recordMonth === currentMonth && recordYear === currentYear;\r\n//         });\r\n\r\n//         setSalaryHistory(filteredData);\r\n//       } catch (error) {\r\n//         console.error('Failed to fetch salary history', error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     if (id) fetchSalaryHistory();\r\n//   }, [id]);\r\n\r\n//   return (\r\n//     <div className=\"salary-history-container\">\r\n//       <h2>This Month's Salary History</h2>\r\n//       {loading ? (\r\n//         <p>Loading...</p>\r\n//       ) : salaryHistory.length === 0 ? (\r\n//         <p>No salary records found for this employee this month.</p>\r\n//       ) : (\r\n//         <table className=\"salary-history-table\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Month</th>\r\n//               <th>Year</th>\r\n//               <th>Basic Salary</th>\r\n//               <th>Allowances</th>\r\n//               <th>Deductions</th>\r\n//               <th>Gross Salary</th>\r\n//               <th>Net Salary</th>\r\n//               <th>Status</th>\r\n//               <th>Payment Date</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {salaryHistory.map((record, index) => {\r\n//               const recordDate = new Date(record.created_at);\r\n//               const month = recordDate.toLocaleString('default', { month: 'long' });\r\n//               const year = recordDate.getFullYear();\r\n\r\n//               return (\r\n//                 <tr key={index}>\r\n//                   <td>{month}</td>\r\n//                   <td>{year}</td>\r\n//                   <td>{record.basic_salary || 0}</td>\r\n//                   <td>{record.allowances || 0}</td>\r\n//                   <td>{record.deductions || 0}</td>\r\n//                   <td>{record.gross_salary || 0}</td>\r\n//                   <td>{record.net_salary || 0}</td>\r\n//                   <td>{record.salary_status}</td>\r\n//                   <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\r\n//                 </tr>\r\n//               );\r\n//             })}\r\n//           </tbody>\r\n//         </table>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SalaryDetailOfEmp;\r\n\r\n\r\n\r\n\r\nimport './SalaryDetailOfEmp.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst SalaryDetailOfEmp = () => {\r\n  const { id } = useParams();\r\n  const [salaryHistory, setSalaryHistory] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [generatingPayslip, setGeneratingPayslip] = useState(false);\r\n  const [message, setMessage] = useState(''); // State for message\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const currentDate = new Date();\r\n    const currentMonth = currentDate.getMonth(); // 0-indexed\r\n    const currentYear = currentDate.getFullYear();\r\n\r\n    const fetchSalaryHistory = async () => {\r\n      try {\r\n        const res = await axios.get(\r\n          `http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        );\r\n\r\n        const filteredData = res.data.filter(record => {\r\n          const recordDate = new Date(record.created_at);\r\n          const recordMonth = recordDate.getMonth();\r\n          const recordYear = recordDate.getFullYear();\r\n\r\n          return recordMonth === currentMonth && recordYear === currentYear;\r\n        });\r\n\r\n        setSalaryHistory(filteredData);\r\n      } catch (error) {\r\n        console.error('Failed to fetch salary history', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (id) fetchSalaryHistory();\r\n  }, [id]);\r\n\r\n  // Handle \"Generate Payslip\" button click\r\n  const handleGeneratePayslip = async (employeeId) => {\r\n    setGeneratingPayslip(true);\r\n    setMessage('');\r\n    const token = localStorage.getItem('token');\r\n  \r\n    try {\r\n      const response = await axios.put(\r\n        `http://127.0.0.1:8000/api/salary/generate_payslip/${employeeId}/`,\r\n        {},\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n          responseType: 'blob',\r\n        }\r\n      );\r\n  \r\n      // Download Payslip\r\n      const blob = new Blob([response.data], { type: 'application/pdf' });\r\n      const link = document.createElement('a');\r\n      link.href = URL.createObjectURL(blob);\r\n      link.click();\r\n  \r\n      setMessage('Payslip generated successfully and download started.');\r\n  \r\n      // ✅ Re-fetch salary history to get updated status and payment date\r\n      const updatedRes = await axios.get(\r\n        `http://127.0.0.1:8000/api/salary/employee_salary_history/${id}/`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n  \r\n      const currentDate = new Date();\r\n      const currentMonth = currentDate.getMonth();\r\n      const currentYear = currentDate.getFullYear();\r\n  \r\n      const filteredData = updatedRes.data.filter(record => {\r\n        const recordDate = new Date(record.created_at);\r\n        const recordMonth = recordDate.getMonth();\r\n        const recordYear = recordDate.getFullYear();\r\n        return recordMonth === currentMonth && recordYear === currentYear;\r\n      });\r\n  \r\n      setSalaryHistory(filteredData);\r\n    } catch (error) {\r\n      console.error('Failed to generate payslip', error);\r\n      setMessage('Failed to generate payslip. Please try again.');\r\n    } finally {\r\n      setGeneratingPayslip(false);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <div className=\"salary-history-container\">\r\n      <h2>Current Month Salary Details</h2>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : salaryHistory.length === 0 ? (\r\n        <p>No salary records found for this employee this month.</p>\r\n      ) : (\r\n        <>\r\n          <table className=\"salary-history-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Month</th>\r\n                <th>Year</th>\r\n                <th>Basic Salary</th>\r\n                <th>Allowances</th>\r\n                <th>Deductions</th>\r\n                <th>Gross Salary</th>\r\n                <th>Net Salary</th>\r\n                <th>Status</th>\r\n                <th>Payment Date</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {salaryHistory.map((record, index) => {\r\n                const recordDate = new Date(record.created_at);\r\n                const month = recordDate.toLocaleString('default', { month: 'long' });\r\n                const year = recordDate.getFullYear();\r\n\r\n                return (\r\n                  <tr key={index}>\r\n                    <td>{month}</td>\r\n                    <td>{year}</td>\r\n                    <td>{record.basic_salary || 0}</td>\r\n                    <td>{record.allowances || 0}</td>\r\n                    <td>{record.deductions || 0}</td>\r\n                    <td>{record.gross_salary || 0}</td>\r\n                    <td>{record.net_salary || 0}</td>\r\n                    <td>{record.salary_status}</td>\r\n                    <td>{record.payment_date ? new Date(record.payment_date).toLocaleDateString() : '—'}</td>\r\n                    <td>\r\n  {record.salary_status === 'Pending' && (\r\n    <button\r\n      className=\"generate-payslip-btn\"\r\n      onClick={() => handleGeneratePayslip(record.id)}\r\n      disabled={generatingPayslip}\r\n    >\r\n      {generatingPayslip ? 'Generating...' : 'Generate Payslip'}\r\n    </button>\r\n  )}\r\n</td>\r\n\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </>\r\n      )}\r\n\r\n      {/* Display success or error message */}\r\n      {message && <div className=\"message\">{message}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SalaryDetailOfEmp;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAO,yBAAyB;AAChC,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}