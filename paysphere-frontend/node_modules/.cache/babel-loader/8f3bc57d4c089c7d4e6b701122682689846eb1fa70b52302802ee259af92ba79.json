{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gowth\\\\OneDrive\\\\Desktop\\\\paysphere\\\\PaySphere-Comprehensive-Payroll-Services_Feb_2025\\\\paysphere-frontend\\\\src\\\\components\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ProtectedRoute = ({ element, allowedRoles }) => {\n//     const role = localStorage.getItem(\"role\");\n\n//     if (!role || !allowedRoles.includes(role)) {\n//         return <Navigate to=\"/\" replace />;\n//     }\n\n//     return element;\n// };\n\n// export default ProtectedRoute;\n\n// import React, { useMemo } from \"react\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ProtectedRoute = ({ element, allowedRoles }) => {\n//     const role = localStorage.getItem(\"role\");\n\n//     const content = useMemo(() => {\n//         if (!role || !allowedRoles.includes(role)) {\n//             return <Navigate to=\"/\" replace />;\n//         }\n//         return element;\n//     }, [role, allowedRoles, element]); // ✅ Prevents unnecessary re-renders\n\n//     return content;\n// };\n\n// export default React.memo(ProtectedRoute);\n\n// import React from \"react\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ProtectedRoute = ({ element, allowedRoles }) => {\n//     const role = localStorage.getItem(\"role\");\n\n//     if (!role || !allowedRoles.includes(role)) {\n//         return <Navigate to=\"/\" replace />;\n//     }\n\n//     return element;\n// };\n\n// export default React.memo(ProtectedRoute);\n\n// import React from \"react\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ProtectedRoute = ({ element, allowedRoles }) => {\n//   const role = localStorage.getItem(\"role\");\n\n//   if (!role || !allowedRoles.includes(role)) {\n//     return <Navigate to=\"/\" replace />;\n//   }\n\n//   return element;\n// };\n\n// export default ProtectedRoute;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ProtectedRoute = ({ element, allowedRoles }) => {\n//   const [role, setRole] = useState(null);\n\n//   useEffect(() => {\n//     const storedRole = localStorage.getItem(\"role\");\n//     setRole(storedRole);\n//   }, []);\n\n//   if (!role) {\n//     return null; // ✅ Prevents unnecessary re-renders\n//   }\n\n//   if (!allowedRoles.includes(role)) {\n//     return <Navigate to=\"/\" replace />;\n//   }\n\n//   return element;\n// };\n\n// export default ProtectedRoute;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ProtectedRoute = ({ element, allowedRoles }) => {\n//   const [role, setRole] = useState(() => localStorage.getItem(\"role\")); // ✅ Get it directly once\n\n//   // Optional: Re-check localStorage in effect (edge case)\n//   useEffect(() => {\n//     const storedRole = localStorage.getItem(\"role\");\n//     if (storedRole !== role) {\n//       setRole(storedRole);\n//     }\n//   }, []);\n\n//   if (role === null) {\n//     return null; // Still mounting / fetching role\n//   }\n\n//   if (!allowedRoles.includes(role)) {\n//     return <Navigate to=\"/\" replace />;\n//   }\n\n//   return element;\n// };\n\n// export default ProtectedRoute;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  element,\n  allowedRoles\n}) => {\n  _s();\n  const [role, setRole] = useState(null);\n  useEffect(() => {\n    const storedRole = localStorage.getItem(\"role\");\n    setRole(storedRole);\n  }, []);\n  if (role === null) {\n    return null; // Optional: could show a loading spinner here\n  }\n  if (!allowedRoles.includes(role)) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 12\n    }, this);\n  }\n  return element;\n};\n_s(ProtectedRoute, \"GMLvItH/JZBp/dwIzvmJB4jdCdo=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","element","allowedRoles","_s","role","setRole","storedRole","localStorage","getItem","includes","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gowth/OneDrive/Desktop/paysphere/PaySphere-Comprehensive-Payroll-Services_Feb_2025/paysphere-frontend/src/components/ProtectedRoute.jsx"],"sourcesContent":["// import React from \"react\";\r\n// import { Navigate } from \"react-router-dom\";\r\n\r\n// const ProtectedRoute = ({ element, allowedRoles }) => {\r\n//     const role = localStorage.getItem(\"role\");\r\n\r\n//     if (!role || !allowedRoles.includes(role)) {\r\n//         return <Navigate to=\"/\" replace />;\r\n//     }\r\n\r\n//     return element;\r\n// };\r\n\r\n// export default ProtectedRoute;\r\n\r\n// import React, { useMemo } from \"react\";\r\n// import { Navigate } from \"react-router-dom\";\r\n\r\n// const ProtectedRoute = ({ element, allowedRoles }) => {\r\n//     const role = localStorage.getItem(\"role\");\r\n\r\n//     const content = useMemo(() => {\r\n//         if (!role || !allowedRoles.includes(role)) {\r\n//             return <Navigate to=\"/\" replace />;\r\n//         }\r\n//         return element;\r\n//     }, [role, allowedRoles, element]); // ✅ Prevents unnecessary re-renders\r\n\r\n//     return content;\r\n// };\r\n\r\n// export default React.memo(ProtectedRoute);\r\n\r\n\r\n// import React from \"react\";\r\n// import { Navigate } from \"react-router-dom\";\r\n\r\n// const ProtectedRoute = ({ element, allowedRoles }) => {\r\n//     const role = localStorage.getItem(\"role\");\r\n\r\n//     if (!role || !allowedRoles.includes(role)) {\r\n//         return <Navigate to=\"/\" replace />;\r\n//     }\r\n\r\n//     return element;\r\n// };\r\n\r\n// export default React.memo(ProtectedRoute);\r\n\r\n\r\n// import React from \"react\";\r\n// import { Navigate } from \"react-router-dom\";\r\n\r\n// const ProtectedRoute = ({ element, allowedRoles }) => {\r\n//   const role = localStorage.getItem(\"role\");\r\n\r\n//   if (!role || !allowedRoles.includes(role)) {\r\n//     return <Navigate to=\"/\" replace />;\r\n//   }\r\n\r\n//   return element;\r\n// };\r\n\r\n// export default ProtectedRoute;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Navigate } from \"react-router-dom\";\r\n\r\n// const ProtectedRoute = ({ element, allowedRoles }) => {\r\n//   const [role, setRole] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const storedRole = localStorage.getItem(\"role\");\r\n//     setRole(storedRole);\r\n//   }, []);\r\n\r\n//   if (!role) {\r\n//     return null; // ✅ Prevents unnecessary re-renders\r\n//   }\r\n\r\n//   if (!allowedRoles.includes(role)) {\r\n//     return <Navigate to=\"/\" replace />;\r\n//   }\r\n\r\n//   return element;\r\n// };\r\n\r\n// export default ProtectedRoute;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Navigate } from \"react-router-dom\";\r\n\r\n// const ProtectedRoute = ({ element, allowedRoles }) => {\r\n//   const [role, setRole] = useState(() => localStorage.getItem(\"role\")); // ✅ Get it directly once\r\n\r\n//   // Optional: Re-check localStorage in effect (edge case)\r\n//   useEffect(() => {\r\n//     const storedRole = localStorage.getItem(\"role\");\r\n//     if (storedRole !== role) {\r\n//       setRole(storedRole);\r\n//     }\r\n//   }, []);\r\n\r\n//   if (role === null) {\r\n//     return null; // Still mounting / fetching role\r\n//   }\r\n\r\n//   if (!allowedRoles.includes(role)) {\r\n//     return <Navigate to=\"/\" replace />;\r\n//   }\r\n\r\n//   return element;\r\n// };\r\n\r\n// export default ProtectedRoute;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst ProtectedRoute = ({ element, allowedRoles }) => {\r\n  const [role, setRole] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const storedRole = localStorage.getItem(\"role\");\r\n    setRole(storedRole);\r\n  }, []);\r\n\r\n  if (role === null) {\r\n    return null; // Optional: could show a loading spinner here\r\n  }\r\n\r\n  if (!allowedRoles.includes(role)) {\r\n    return <Navigate to=\"/\" replace />;\r\n  }\r\n\r\n  return element;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACpD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/CH,OAAO,CAACC,UAAU,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,IAAI,KAAK,IAAI,EAAE;IACjB,OAAO,IAAI,CAAC,CAAC;EACf;EAEA,IAAI,CAACF,YAAY,CAACO,QAAQ,CAACL,IAAI,CAAC,EAAE;IAChC,oBAAOL,OAAA,CAACF,QAAQ;MAACa,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpC;EAEA,OAAOd,OAAO;AAChB,CAAC;AAACE,EAAA,CAjBIH,cAAc;AAAAgB,EAAA,GAAdhB,cAAc;AAmBpB,eAAeA,cAAc;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}